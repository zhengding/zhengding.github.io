{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"54a2a345f0ce1ea59876e942253d8a7a284b8709","modified":1511345824000},{"_id":"source/_posts/.Ulysses-favorites.plist","hash":"7775fe82b2e93c96156d211d3edba6298921fc9d","modified":1511346391000},{"_id":"source/_posts/filter配置跨域访问.md","hash":"c5389acf07654c3beee8b3e6acfcc6eae2e32337","modified":1511166246000},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"da442cbeea06ce24d6abb82474304b590992bffb","modified":1511346391000},{"_id":"source/_posts/VPS 搭建 Shadowsocks 翻墙.md","hash":"06d09cc7cef9db12d83dc58ddd4362f831036ee6","modified":1511340315000},{"_id":"source/_posts/mpmpal_cr-document.md","hash":"581b0402fc5565a2f360ebed51f57b37f2483c89","modified":1511346283000},{"_id":"source/_posts/手把手搭建Hexo+OSChina博客.md","hash":"2e5e181d31a546e1931a522575e8cf6af912054c","modified":1511165641000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1510807514000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1510912922000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1510912922000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1510912922000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1510912922000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1510912922000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1510912922000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1510912922000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1510912922000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1510912922000},{"_id":"themes/next/README.md","hash":"529d53dfa97678f8ce4c95620b26e61154162a29","modified":1510912922000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1510912922000},{"_id":"themes/next/README.cn.md","hash":"02713071ef9e260b3fe77f4403942189d55a00e9","modified":1510912922000},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1510912922000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1510912922000},{"_id":"themes/next/.DS_Store","hash":"7edcfc62759076ddec6c6e3c3ed80108ac5cce0d","modified":1511152599000},{"_id":"themes/next/_config.yml","hash":"ce8b246a7cd4be210b44bd52e03cd2e4037f2e6c","modified":1511162112000},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1510912922000},{"_id":"source/about/index.md","hash":"ef65bd43bd489cabc1544872114dee5b710e5e01","modified":1511153998000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1510912922000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1510912922000},{"_id":"source/categories/index.md","hash":"f84d5d2fc3fa9af4f4c18221b19919b5f86d68a8","modified":1511153913000},{"_id":"source/tags/index.md","hash":"7aa25004ab71a8fd8aa9d37eb0ddc4a3492c05e8","modified":1511153950000},{"_id":"themes/next/.git/packed-refs","hash":"f1fe33b8cdc221749eb26034a82b483cd86ef1b6","modified":1510912922000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1510912922000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1510912922000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1510912913000},{"_id":"themes/next/.git/index","hash":"21bf6f4962bfd83b4aeaf53ca5947a49d203fe69","modified":1510912922000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1510912922000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1510912922000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1510912922000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1510912922000},{"_id":"themes/next/scripts/.DS_Store","hash":"71fa005daae49ff9dfe0ef93889ed26118f25c89","modified":1511152599000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1510912922000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1510912922000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1510912922000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1510912922000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1510912922000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1510912922000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1510912922000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1510912922000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1510912922000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1510912922000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1510912922000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1510912922000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1510912922000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1510912922000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1510912922000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1510912922000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1510912922000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1510912922000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1510912922000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1510912922000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1510912922000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1510912922000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1510912922000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1510912922000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1510912922000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1510912922000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/source/.DS_Store","hash":"22018f3ebdfdb707b5bc1cce872cdc0315d24302","modified":1511149757000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1510912913000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1510912913000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1510912913000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1510912913000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1510912913000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1510912913000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1510912913000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1510912913000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1510912913000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1510912913000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1510912922000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1510912922000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1510912922000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1510912922000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1510912922000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1510912922000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1510912922000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1510912922000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1510912922000},{"_id":"themes/next/.git/logs/HEAD","hash":"9d594502bc4cdd735255cec561bc4e6d2a191763","modified":1510912922000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1510912922000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1510912922000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1510912922000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1510912922000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1510912922000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1510912922000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1510912922000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1510912922000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1510912922000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1510912922000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1510912922000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1510912922000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1510912922000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1510912922000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1510912922000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1510912922000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1510912922000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1510912922000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1510912922000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1510912922000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1510912922000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1510912922000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1510912922000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1510912922000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1510912922000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1510912922000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1510912922000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1510912922000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1510912922000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1510912922000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1510912922000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1510912922000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1510912922000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1510912922000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1510912922000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1510912922000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1510912922000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1510912922000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510912922000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1510912922000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510912922000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1510912922000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1510912922000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510912922000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1510912922000},{"_id":"themes/next/source/js/.DS_Store","hash":"2f7cd6f8e5c038cdc17ecd460f7ce78814ae3309","modified":1511149757000},{"_id":"themes/next/.git/refs/heads/master","hash":"53814d46a4f19b2e026339024c8c1e2f179bdb6c","modified":1510912922000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1510912922000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1510912922000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1510912922000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1510912922000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1510912922000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1510912922000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1510912922000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1510912922000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1510912922000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1510912922000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1510912922000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1510912922000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1510912922000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1510912922000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1510912922000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1510912922000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1510912922000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1510912922000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1510912922000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1510912922000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1510912922000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1510912922000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1510912922000},{"_id":"themes/next/source/js/src/.DS_Store","hash":"5f0d4fc239f2008f81d15348ff528bbec8c52be0","modified":1511149784000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1510912922000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1510912922000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1510912922000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1510912922000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1510912922000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1510912922000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1510912922000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1510912922000},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1510912922000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1510912922000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1510912922000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1510912922000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1510912922000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1510912922000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1510912922000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1510912922000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1510912922000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1510912922000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1510912922000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1510912922000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1510912922000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1510912922000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1510912922000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1510912922000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1510912922000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1510912922000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1510912922000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1510912922000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1510912922000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1510912922000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1510912922000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1510912922000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1510912922000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1510912922000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1510912922000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1510912922000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1510912922000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1510912922000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1510912922000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1510912922000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1510912922000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1510912922000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9d594502bc4cdd735255cec561bc4e6d2a191763","modified":1510912922000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1510912922000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1510912922000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1510912922000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1510912922000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1510912922000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1510912922000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1510912922000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1510912922000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1510912922000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1510912922000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1510912922000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1510912922000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1510912922000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1510912922000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1510912922000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9d594502bc4cdd735255cec561bc4e6d2a191763","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1510912922000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1510912922000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510912922000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1510912922000},{"_id":"themes/next/.git/objects/pack/pack-28d87b026b5370a385755d143050e3ce0ce161e2.idx","hash":"db365f2626516321010a95981bdf898fb0c79a82","modified":1510912921000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1510912922000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1510912922000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1510912922000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1510912922000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1510912922000},{"_id":"themes/next/.git/objects/pack/pack-28d87b026b5370a385755d143050e3ce0ce161e2.pack","hash":"bb95fb2e0a3eaefe07c90c71ef4e9be7ca80c5eb","modified":1510912921000}],"Category":[{"name":"后端","_id":"cjaawjgio0002ils6prxzmlds"},{"name":"干货","_id":"cjaawjgiv0004ils65n4z3zuq"},{"name":"前端","_id":"cjaawjgkc000eils67gtkr6ge"}],"Data":[],"Page":[{"title":"about","date":"2017-11-20T04:59:39.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-11-20 12:59:39\ncomments: false\n---","updated":"2017-11-20T04:59:58.000Z","path":"about/index.html","layout":"page","_id":"cjaawjgp2000mils64al6n68a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-11-20T04:52:19.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-11-20 12:52:19\ntype: \"categories\"\ncomments: false\n---","updated":"2017-11-20T04:58:33.000Z","path":"categories/index.html","layout":"page","_id":"cjaawjgw1000nils67boog0e7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-11-20T04:45:11.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-11-20 12:45:11\ntype: \"tags\"\ncomments: false\n---","updated":"2017-11-20T04:59:10.000Z","path":"tags/index.html","layout":"page","_id":"cjaawjgw5000oils6uzxjwzlr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"filter配置跨域访问","date":"2017-11-20T08:16:01.000Z","_content":"\n## Java代码：\n### CommonInterceptor.java\n```bash\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\n\npublic class CommonInterceptor implements HandlerInterceptor {\n    private List<String> excludedUrls;\n\n    public List<String> getExcludedUrls() {\n        return excludedUrls;\n    }\n\n    public void setExcludedUrls(List<String> excludedUrls) {\n        this.excludedUrls = excludedUrls;\n    }\n\n    /**\n     * 在业务处理器处理请求之前被调用 如果返回false\n     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),\n     * 再退出拦截器链, 如果返回true 执行下一个拦截器,\n     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller\n     * 然后进入拦截器链,\n     * 从最后一个拦截器往回执行所有的postHandle()\n     * 接着再从最后一个拦截器往回执行所有的afterCompletion()\n     *\n     * @param request\n     * @param response\n     */\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\");\n        return true;\n    }\n\n    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n    }\n\n    /**\n     * 在DispatcherServlet完全处理完请求后被调用\n     * 当有拦截器抛出异常时,\n     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()\n     *\n     * @param request\n     * @param response\n     * @param handler\n     */\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n    }\n}\n```\n### ServletContextConfig.java\n```bash\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\n\npublic class CommonInterceptor implements HandlerInterceptor {\n    private List<String> excludedUrls;\n\n    public List<String> getExcludedUrls() {\n        return excludedUrls;\n    }\n\n    public void setExcludedUrls(List<String> excludedUrls) {\n        this.excludedUrls = excludedUrls;\n    }\n\n    /**\n     * 在业务处理器处理请求之前被调用 如果返回false\n     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),\n     * 再退出拦截器链, 如果返回true 执行下一个拦截器,\n     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller\n     * 然后进入拦截器链,\n     * 从最后一个拦截器往回执行所有的postHandle()\n     * 接着再从最后一个拦截器往回执行所有的afterCompletion()\n     *\n     * @param request\n     * @param response\n     */\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\");\n        return true;\n    }\n\n    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n    }\n\n    /**\n     * 在DispatcherServlet完全处理完请求后被调用\n     * 当有拦截器抛出异常时,\n     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()\n     *\n     * @param request\n     * @param response\n     * @param handler\n     */\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n    }\n}\n```","source":"_posts/filter配置跨域访问.md","raw":"---\ntitle: filter配置跨域访问\ndate: 2017-11-20 16:16:01\ntags:\n- filter\n- 跨域\ncategories: 后端\n---\n\n## Java代码：\n### CommonInterceptor.java\n```bash\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\n\npublic class CommonInterceptor implements HandlerInterceptor {\n    private List<String> excludedUrls;\n\n    public List<String> getExcludedUrls() {\n        return excludedUrls;\n    }\n\n    public void setExcludedUrls(List<String> excludedUrls) {\n        this.excludedUrls = excludedUrls;\n    }\n\n    /**\n     * 在业务处理器处理请求之前被调用 如果返回false\n     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),\n     * 再退出拦截器链, 如果返回true 执行下一个拦截器,\n     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller\n     * 然后进入拦截器链,\n     * 从最后一个拦截器往回执行所有的postHandle()\n     * 接着再从最后一个拦截器往回执行所有的afterCompletion()\n     *\n     * @param request\n     * @param response\n     */\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\");\n        return true;\n    }\n\n    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n    }\n\n    /**\n     * 在DispatcherServlet完全处理完请求后被调用\n     * 当有拦截器抛出异常时,\n     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()\n     *\n     * @param request\n     * @param response\n     * @param handler\n     */\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n    }\n}\n```\n### ServletContextConfig.java\n```bash\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\n\npublic class CommonInterceptor implements HandlerInterceptor {\n    private List<String> excludedUrls;\n\n    public List<String> getExcludedUrls() {\n        return excludedUrls;\n    }\n\n    public void setExcludedUrls(List<String> excludedUrls) {\n        this.excludedUrls = excludedUrls;\n    }\n\n    /**\n     * 在业务处理器处理请求之前被调用 如果返回false\n     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),\n     * 再退出拦截器链, 如果返回true 执行下一个拦截器,\n     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller\n     * 然后进入拦截器链,\n     * 从最后一个拦截器往回执行所有的postHandle()\n     * 接着再从最后一个拦截器往回执行所有的afterCompletion()\n     *\n     * @param request\n     * @param response\n     */\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\");\n        return true;\n    }\n\n    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n    }\n\n    /**\n     * 在DispatcherServlet完全处理完请求后被调用\n     * 当有拦截器抛出异常时,\n     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()\n     *\n     * @param request\n     * @param response\n     * @param handler\n     */\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n    }\n}\n```","slug":"filter配置跨域访问","published":1,"updated":"2017-11-20T08:24:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaawjghx0000ils6p6b4lxvz","content":"<h2 id=\"Java代码：\"><a href=\"#Java代码：\" class=\"headerlink\" title=\"Java代码：\"></a>Java代码：</h2><h3 id=\"CommonInterceptor-java\"><a href=\"#CommonInterceptor-java\" class=\"headerlink\" title=\"CommonInterceptor.java\"></a>CommonInterceptor.java</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CommonInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\">    private List&lt;String&gt; excludedUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;String&gt; <span class=\"function\"><span class=\"title\">getExcludedUrls</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setExcludedUrls(List&lt;String&gt; excludedUrls) &#123;</span><br><span class=\"line\">        this.excludedUrls = excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在业务处理器处理请求之前被调用 如果返回<span class=\"literal\">false</span></span><br><span class=\"line\">     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),</span><br><span class=\"line\">     * 再退出拦截器链, 如果返回<span class=\"literal\">true</span> 执行下一个拦截器,</span><br><span class=\"line\">     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller</span><br><span class=\"line\">     * 然后进入拦截器链,</span><br><span class=\"line\">     * 从最后一个拦截器往回执行所有的postHandle()</span><br><span class=\"line\">     * 接着再从最后一个拦截器往回执行所有的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"string\">\"3600\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作</span><br><span class=\"line\">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在DispatcherServlet完全处理完请求后被调用</span><br><span class=\"line\">     * 当有拦截器抛出异常时,</span><br><span class=\"line\">     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     * @param handler</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ServletContextConfig-java\"><a href=\"#ServletContextConfig-java\" class=\"headerlink\" title=\"ServletContextConfig.java\"></a>ServletContextConfig.java</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CommonInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\">    private List&lt;String&gt; excludedUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;String&gt; <span class=\"function\"><span class=\"title\">getExcludedUrls</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setExcludedUrls(List&lt;String&gt; excludedUrls) &#123;</span><br><span class=\"line\">        this.excludedUrls = excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在业务处理器处理请求之前被调用 如果返回<span class=\"literal\">false</span></span><br><span class=\"line\">     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),</span><br><span class=\"line\">     * 再退出拦截器链, 如果返回<span class=\"literal\">true</span> 执行下一个拦截器,</span><br><span class=\"line\">     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller</span><br><span class=\"line\">     * 然后进入拦截器链,</span><br><span class=\"line\">     * 从最后一个拦截器往回执行所有的postHandle()</span><br><span class=\"line\">     * 接着再从最后一个拦截器往回执行所有的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"string\">\"3600\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作</span><br><span class=\"line\">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在DispatcherServlet完全处理完请求后被调用</span><br><span class=\"line\">     * 当有拦截器抛出异常时,</span><br><span class=\"line\">     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     * @param handler</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java代码：\"><a href=\"#Java代码：\" class=\"headerlink\" title=\"Java代码：\"></a>Java代码：</h2><h3 id=\"CommonInterceptor-java\"><a href=\"#CommonInterceptor-java\" class=\"headerlink\" title=\"CommonInterceptor.java\"></a>CommonInterceptor.java</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CommonInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\">    private List&lt;String&gt; excludedUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;String&gt; <span class=\"function\"><span class=\"title\">getExcludedUrls</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setExcludedUrls(List&lt;String&gt; excludedUrls) &#123;</span><br><span class=\"line\">        this.excludedUrls = excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在业务处理器处理请求之前被调用 如果返回<span class=\"literal\">false</span></span><br><span class=\"line\">     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),</span><br><span class=\"line\">     * 再退出拦截器链, 如果返回<span class=\"literal\">true</span> 执行下一个拦截器,</span><br><span class=\"line\">     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller</span><br><span class=\"line\">     * 然后进入拦截器链,</span><br><span class=\"line\">     * 从最后一个拦截器往回执行所有的postHandle()</span><br><span class=\"line\">     * 接着再从最后一个拦截器往回执行所有的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"string\">\"3600\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作</span><br><span class=\"line\">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在DispatcherServlet完全处理完请求后被调用</span><br><span class=\"line\">     * 当有拦截器抛出异常时,</span><br><span class=\"line\">     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     * @param handler</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ServletContextConfig-java\"><a href=\"#ServletContextConfig-java\" class=\"headerlink\" title=\"ServletContextConfig.java\"></a>ServletContextConfig.java</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CommonInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\">    private List&lt;String&gt; excludedUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;String&gt; <span class=\"function\"><span class=\"title\">getExcludedUrls</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setExcludedUrls(List&lt;String&gt; excludedUrls) &#123;</span><br><span class=\"line\">        this.excludedUrls = excludedUrls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在业务处理器处理请求之前被调用 如果返回<span class=\"literal\">false</span></span><br><span class=\"line\">     * 从当前的拦截器往回执行所有拦截器的afterCompletion(),</span><br><span class=\"line\">     * 再退出拦截器链, 如果返回<span class=\"literal\">true</span> 执行下一个拦截器,</span><br><span class=\"line\">     * 直到所有的拦截器都执行完毕 再执行被拦截的Controller</span><br><span class=\"line\">     * 然后进入拦截器链,</span><br><span class=\"line\">     * 从最后一个拦截器往回执行所有的postHandle()</span><br><span class=\"line\">     * 接着再从最后一个拦截器往回执行所有的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"string\">\"3600\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,Content-Encoding\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 在业务处理器处理请求执行完成后,生成视图之前执行的动作</span><br><span class=\"line\">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 在DispatcherServlet完全处理完请求后被调用</span><br><span class=\"line\">     * 当有拦截器抛出异常时,</span><br><span class=\"line\">     * 会从当前拦截器往回执行所有的拦截器的afterCompletion()</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param request</span><br><span class=\"line\">     * @param response</span><br><span class=\"line\">     * @param handler</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"git教程","date":"2017-11-20T08:16:01.000Z","_content":"\n# EAST项目部署常见问题\n## 项目启动报错\n1. 保证服务器jdk版本为1.8以上\n2. 首次部署仅将fitech.war,platform.war和libs.war放入服务器中间件中，防止日志太多，异常不容易排查\n2. 查看服务器日志，发现connection异常，检查fitech中的数据库配置是否正确\n\n## 用户登录异常\n1. 检查数据脚本都正常执行了，可查看select \\* from sysuser是否有数据\n2. 访问浏览器控制台，F12，登录一下看看是否有异常，如果是404，检查platform中的fitech.js是否修改成功\n\n## 登录之后系统常见问题\n1. 不要随意直接在数据库中修改数据，会导致页面显示有问题，如果实在想操作，请先询问产品开发\n2. 系统配置中的制度配置导入时间比较久，耐心等待一会，重复导入可能会导致数据问题，查看是否成功，可在报文配置中查看数据表\n\\3. \n\n## ETL数据调度常见问题\n> 新平台EAST需要配置3个作业才可以正常运行  \n> - 数据补录作业\n1. 数据补录系统待上报报文流程存储过程（east.create\\_bl\\_task|系统内置）\n2. 数据补录系统流程开启任务（JAVA任务）\n3. EAST收据调度作业\n1. EAST待上报报文流程存储过程（east.proc\\_ledgerReport|系统内置）  \n2. 数据拉取存储过程（客户现场人员编写）  \n3. EAST流程开启任务（JAVA任务）\n7. EAST报文生成作业\n1. EAST上报报文生成任务（JAVA任务）\n\n1. 安装部署手册中的案例都是范例，请根据实际情况进行配置\n2. 调度任务有没有成功执行，可以查看控制台日志是否执行成功\n3. 数据库连接异常，可查看fitech-etl-1.0.war是否配置成功\n4. 出现数组越界，可能是作业中的任务配置有问题，可截图发给开发排查问题\n5. ETL会根据配置频度来控制执行状态，例如日频度，则当天只能执行一次，如果想多次执行，则到数据调度监控中重新执行作业，或者执行SQL手动删除ETL调度任务 例如：\n\n```ruby\nselect * from etl_job_monitor;\nselect * from ETL_TASK_MONITOR;\n\ndelete from ETL_JOB_MONITOR where yxrq = '20171020';\ndelete from ETL_TASK_MONITOR where yxrq = '20171020';\ncommit;\n```\n# EAST项目部署手册\n## 服务器环境\n- 数据库（如果是oracle需要安装oracle客户端，用作sqluldr2报文生成）\n- jdk1.8以上\n- 服务器中间件（需要支持jdk1.8）\n\n## 项目说明\n> 项目分成4个子服务，由于模块之间有相互调用，需要分先后启动，分别配置\n\n- fitech.war\n_平台主服务,处理平台业务逻辑_\n- fitech-etl-1.0.war\n_ETL调度系统服务，处理数据抽取等调度任务_\n- platform.war\n_前端主服务_\n- libs.war\n_前端框架lib包_\n\n\n\n## 项目部署\n#### 主服务部署配置\n- 将fitech.war放入服务中间件\n- 修改服务配置文件application-env.properties\n![配置文件所在位置][image-1]\n- 需要修改的配置\n![输入图片说明][image-2] \n \n1. 数据库配置，修改对应IP,端口和监听，以及用户名和密码\n2. initPassword是系统创建用户初始化密码的默认密码，根据需求修改\n3. template\\_path是系统模板存放路径，用于机构，用户等功能的模板下载\n4. ledgerRptFIle\\_tempPath和ledgerRptFIle\\_path是EAST生成报文存放的路径和临时文件生成的存放路径\n5. DBurl是sqluldr2报文生成数据链接配置\n\n#### 客户端部署配置\n- 将platform.war和libs.war放入服务中间件\n- 修改配置文件fitech.js\n![放置路径][image-3]\n![输入图片说明][image-4]\n1. pathcs是配置ETL调度系统地址\n2. path是配置主服务地址(包括服务项目名)\n\n#### 创建数据库表\n- _启动服务，主服务会自动创建系统表_ \n- [下载脚本][1]\n- 执行初始化数据  \n- EAST3.0初始化脚本.sql（初始化条线，角色等基础信息）\n- EAST脱敏函数.sql（初始化脱敏函数，复制该脚本中的函数依次执行）  \n- EAST脱敏公式.sql（初始化脱敏公式）\n- 拉链表存储过程.sql（初始化拉链表存储过程，复制该脚本中的存储过程依次执行）\n- ETL初始化脚本.sql（初始化ETL基础数据）\n- ETL存储过程.sql（ETL存储过程）\n- ETD指标建表语句.sql（根据需求执行，免费的10个指标）\n- ETD初始化数据.sql（根据需求执行，免费的10个指标）\n- 数据补录系统存储过程.sql（数据补录系统存储过程）\n- 数据补录初始化脚本.sql（数据补录系统初始化脚本）\n- 初始化EAST3.0校验公式（validata\\_rule05.sql脚本中有N个变量，根据提示进行输入。输入&&+变量,如：&&CHANGE）\n- 将template文件夹下的excel放到application-env.properties配置文件下的template\\_path路径下，用于模板下载\n\n#### 启动项目\n- 启动服务器中间件\n- 打开浏览器访问http://IP:port/platform\n- 访问成功，点击登录使用superadmin登录，密码123456进行登录\n\n#### 配置业务制度\n- 进入系统配置》制度管理\n![输入图片说明][image-5]\n- 进入银监标准化业务条线》手工配置\n![输入图片说明][image-6]\n- 新增一个制度\n![输入图片说明][image-7]\n- 点击批量载入，选择系统导入文件夹下的EASTtemplate0530.xlsx和fields.xlsx，点击确定，待导入完成后，可生成EAST的58张数据表\n![输入图片说明][image-8]\n- 进入报文配置功能，查看报文是否生成成功，如果成功可进入操作手册进行机构，用户，角色等业务配置\n\n#### 数据配置\n- 系统需要现场实施人员根据客户现场情况创建机构，角色和用户信息\n- 机构信息配置\n- 角色信息配置\n- 用户信息配置\n- 流程信息配置（重要，ETL数据调度流程需要此步骤）  \n\t [详见用户操作手册][2]\n\n#### 配置ETL调度任务\n- 进入业务条线 》 数据调度\n![数据调度][image-9]\n- 进入‘作业分类’菜单，新建一个‘作业分类’，用于管理系统调度作业\n- 进入‘作业管理’菜单，在新建的作业分类下创建调度作业，用于数据调度；例如：\n![输入图片说明][image-10]\n1. 新增作业；例如：\n![输入图片说明][image-11]\n> 选择当前调度作业 _目前仅支持shell脚本和存储过程_  \n> 配置作业频度之后，只有满足当前配置的启动条件，调度作业才会启动 _shell和存储过程必须要有回调true/false_  \n\n- 进入‘任务管理’菜单，用于配置调度作业所需要的任务；例如：\n![输入图片说明][image-12]  \n- 选择任务类型新建任务  \n1.新建procedure存储过程任务；例如：\n![输入图片说明][image-13]  \n_所有的存储过程必须要有回调函数true/false;例如：_\n\n```ruby\ncreate or replace procedure testproc(term in VARCHAR2, result OUT varchar)\nas\n  CURSOR c1 IS\nselect l.id, t.tablename, i.institutionid\n      from ledgerreport l\n      left join ledgerrpttemplate t\n        on l.ledgerreporttemplate_id = t.id\n      left join institution i\n        on l.institution_id = i.id\n     where l.submitstatetype = '2'\n       and l.term = term\n       and  i.institutionid='3011';\nbegin\nFOR acct IN c1 LOOP\n   update test.t_gx_ygb set reportid = acct.id\n\n where nbjgh = '3011';\n  insert into yjbzh.t_gx_ygb\n    select SEQ_FITECH.nextval id,REPORTID,CJRQ,GWBH,YGZT,YXJGMC,ZW,YXJGDM,SFZH,XM,JRXKZH,SSBM,WDH,LXDH,GH,NBJGH,SYNCABLE from test.t_gx_ygb;\n    END LOOP;\n  commit;\n  result := 'true';\nexception\n  when storage_error then\n    result := 'false';\n  when others then\n    result := 'false';\nend testproc;\n\n```\n\n\n2.新加java调度任务；例如：\n![输入图片说明][image-14]\n> 新平台EAST需要配置3个作业才可以正常运行  \n> - 数据补录作业\n1. 数据补录系统待上报报文流程存储过程（east.create\\_bl\\_task|系统内置）\n2. 数据补录系统流程开启任务（JAVA任务）\n3. EAST收据调度作业\n1. EAST待上报报文流程存储过程（east.proc\\_ledgerReport|系统内置）  \n2. 数据拉取存储过程（客户现场人员编写）  \n3. EAST流程开启任务（JAVA任务）\n7. EAST报文生成作业\n1. EAST上报报文生成任务（JAVA任务）\n\n_作业任务为Java任务的实例如下_\n- EAST流程开启任务（POST请求）  \n\t\\`\\`\\`ruby\n类名：com.fitechsoft.util.HttpRequest\n方法名：sendPost\nURL：http://IP:端口/项目名/task/startProcess/\n```\n- EAST上报报文生成任务（GET请求）  \n```ruby\n类名：com.fitechsoft.util.HttpRequest\n方法名：sendGet\nURL：http://IP:端口/项目名/ledgerReportFile/reportFileGenerated/create\n```\n- 数据补录系统流程开启任务（POST请求）\n```ruby\n类名：com.fitechsoft.util.HttpRequest\n方法名：sendPost\nURL:http://IP:端口/项目名/accountTask/startProcess/\n```\n\n- 进入‘作业管理’ 将任务管理中创建的任务配置到作业中\n- 选择你要维护的作业，点击作业维护\n![输入图片说明][image-15]\n2. 添加新步骤，将任务配置到作业管理中\n![输入图片说明][image-16]\n\n#### 部署ETL调度任务\n- 将fitech-etl-1.0.war放入应用服务器中间件中\n- 修改ETL系统配置\n![输入图片说明][image-17]\n- config.properties 修改ETL调度任务配置数据库\n![输入图片说明][image-18]\n- config1.properties 修改ETL调度任务存储过程数据表配置\n![输入图片说明][image-19]\n- 启动服务，控制台正常启动即可，操作员登录系统，查看代办任务是否有数据，有数据即可\n# Home\n1. [新平台activiti参数说明][3]\n2. [git安装教程][4]\n3. [新平台开发手册][5]\n# git安装教程\n### 安装介质\n- Git-1.9.5-preview20150319.exe\n- TortoiseGit-1.8.14.0-64bit.msi\n- Tor4toiseGit-LanguagePack-1.8.14.0-64bit-zh\\_CN.msi  \n\t[下载][6]\n\n### 基本配置\n1. 配置SSH密钥\n![配置SSH密钥][image-20]\n2. 找到生成的git授权KEY,路径默认生成在 _C:\\Users\\rui\\.ssh_\n![git授权KEY][image-21]\n3. 配置TortoiseGit\n![输入图片说明][image-22]\n![输入图片说明][image-23]\n![输入图片说明][image-24]\n\n### 常用语法\n- 查看当前git仓库获取和提交服务地址\n``` ruby\ngit remote -v\n```\n- 查看所有分支\n``` ruby\ngit branch\n```\n- 创建分支\n``` ruby\ngit branch dev\n```\n- 删除分支\n``` ruby\ngit branch -d dev\n```\n- 切换分支\n``` ruby\ngit checkout dev\n```\n- 创建并切换\n``` ruby\ngit checkout -b dev\n```\n- 查看工作区修改文件\n``` ruby\ngit status\n```\n- 查看修改内容\n``` ruby\ngit diff\n```\n- 添加修改到缓存区\n``` ruby\ngit add ***\ngit add -A\n```\n- 版本提交\n``` ruby\ngit commit -m \"branch test\"\n```\n- 合并分支dev到当前分支\n``` ruby\ngit merge dev\n```\n- 指定定远程版本更新到本地指定版本\n``` ruby\ngit pull <远程主机名> <远程分支名>:<本地分支名>\ngit pull origin dev:master\n```\n- 将当前分支提交到远程分支\n``` ruby\ngit push <远程主机名> <远程分支名>\ngit push origin dev\n```\n- 切换git地址\n``` ruby\n1. git remote rm origin\n2. git remote add origin git@github.com:yuquan0821/demo.git\n3. git push origin\n```\n **GIT教程** \n- [网络教程][7]\n\n# oracle数据导出工具sqluldr2配置\n### 安装步骤\n1. 由于sqluldr2是基于oracle客户端的一个插件，则需要在平台服务端安装oracle\\_client\n2. 下载sqluldr2.bin（根据操作系统自行判定版本）到$ORACLE\\_HOME的bin目录，重命名为sqluldr2.bin\n3. 修改oracle安装$HOME目录下.bash\\_profile 增加如下环境变量\n```ruby\nexport LD_LIBRARY_PATH=$ORACLE_HOME/bin:$ORACLE_HOME/lib:/lib:/usr/lib \n```\n4. 执行 sqluldr2.bin 执行成功即可\n# 新平台activiti参数说明\n### activiti配置\n1. 新建bpmn流程\n2. 绘制流程图，具体画法网上有\n3. 设置流程参数\n\t- 配置流程图ID ; name ; namespaces属性（自定义）;\n![输入图片说明][image-25]\n\t- 配置启动监听（该监听为自定义，平台已经初始化一个，无特殊需求可直接使用）\n![输入图片说明][image-26]\n\t- 配置任务节点属性\n\t  1. 配置ID和name(此ID有特殊用处)\n![输入图片说明][image-27]\n\t  2. 配置指派角色和督办角色，\n\t    - 变量规则：${任务节点ID_assignee};${任务节点ID_supervise}\n![输入图片说明][image-28]\n\t  3. 设置任务节点参数\n\t    - argname: 路由KEY，固定为input\n\t    - argvalues: 页面按钮参数，几个路由跳转几个参数，可自定义\n\t    - handleEntry 当前任务节点页面路由地址\n\t    - completeEntry 暂时为空，预留\n\t    - isAssign:是否支持任务转派， ${任务节点ID_isAssign}\n![输入图片说明][image-29]\n\t  4. 路由扭转控制参数\n\t    - 设定页面跳转路由参数${input=='refuse'}\n\t    - 说明 input:为步骤三中argname 的参数，无明显需求暂统一定义为input\n\t    - 说明'refuse' 为步骤三中argvalues参数中定义的value，指定下一节点跳转\n![输入图片说明][image-30]\n# 新平台开发手册\n### 开发环境\n- 开发工具IDE：IntelliJ IDEA/Eclipse\n- 数据库：mysql/oracle\n- JDK:1.8\n- 版本管理工具：GIT\n- 项目管理工具：MAVEN\n\n### 开发规范\n- 项目包名:com.fitech.功能名.项目名\n- 项目类名:\n\t- 领域模型：根据领域模型实际意义创建（能用英文标识的必须使用英文，无法使用英文标识的用拼音首字母创建类名，首字母必须大写)\n\t- 持久化层：领域模型名+Repository\n\t- 业务层：\n\t\t1. 接口：领域模型名+Service\n\t\t2. 实现：领域模型名+ServiceImpl\n\n- 注释:\n- 类名注释：当前类的中文描述+作者  \n\t![类名注释][image-31]\n- 接口名注释：当前接口作用+入参说明+出参说明  \n\t![接口注释][image-32]\n- 业务代码注释：每10行必须有至少有一个注释，业务复杂的3行内要有注释，判断条件（if）必须有注释\n- 预留接口，预留逻辑必须使用//TODO进行标记，并且加上备\n- 如果修改业务逻辑代码，在修改处添加备注，标识修改原因，修改时间和修改人  \n\t![修改说明][image-33]\n\n- 测试用例\n- 每个模块有独立的测试用例配置文件，放置位置在  \n\t![测试用例配置文件][image-34]\n- 每个业务逻辑添加单元测试，测试通过再提交代码  \n\t![测试用例][image-35]\n\n- GIT代码管理\n- 仓库中默认版本master，是我们开发版本\n- 本地更新后，创建本地开发版本dev   (git checkout -b dev)\n- 本地开发完成并测试通过后提交本地仓库\n- 切换版本到master （git checkout master）\n- 更新最新的开发版本\n- 合并DEV版本到master （git merge dev）\n- 确定无冲突之后提交远程仓库\n\n### 技术说明\n- domain说明  \n\t![domain][image-36]\n- 添加注释@entity\n- 主体继承FBSubject,客体继承FBObject\n- 每个字段属性添加@Description(\"角色名称\")注解，方便后期功能扩充\n- service说明  \n\t![service][image-37]\n- 添加@Service注解，加入spring容器管理\n- 添加@ServiceTrace注解，系统会自动管理service接口日志，记录到logback  \n\t![输入图片说明][image-38]\n- 接口的增删改操作需要捕获reporsitory发生的异常，然后throw出appException异常，这个是自定义异常，统一处理系统异常，记录logback,可自定义入参，第一个是异常码，可自定义，第二个是系统异常，可自定义;\n- 对于一个服务接口有2个及以上“增”“删”“改”操作的，需要添加事务@Transactional\n- controller说明  \n\t![controller][image-39]\n- 添加控制层上添加@RequestMapping ，定位当前接口位置，便于后期权限控制  \n\t![输入图片说明][image-40]\n- controller回调GenericResult\\<?\\>封装回调函数，里面有当前请求是否成功，成功状态，异常状态，异常码，数据集对象等，系统回封装成json返回前端;\n- controller中需要记录用户的操作日志，可以只对增删改操作记录，查询根据具体情况记录，addOperateLog第一个为日志信息，自定义，第二个是请求上下文对象，系统需要根据请求上下文获取登录用户信息和IP等;\n- 操作日志需要在finally中记录，防止系统异常没有记录;\n- war 说明\n![war ][image-41]\n1. Activiti.cfg.xml：activiti流程引擎配置\n2. applicationContext-jpa.xml：配置持久化层springdata配置\n3. applicationContext.xml：spring相关配置\n4. Security.cfg.xml：权限框架springsecutity相关配置\n5. secutityAcl.cfg.xml：数据权限acl相关配置\n6. Spring-mvc.xml\n7. Springbatch-content\n8. Application-evn.properties:数据源配置及其他的一些参数配置\n9. Logback.xml：配置系统日志，\n> 注：可根据具体需求进行配置修改\n### 开发注意事项\n1. clean install -Dmaven.test.skip=true 模块编译\n2. jetty:run 项目执行\n### 数据库版本切换\n- 目前系统支持mysql和Oracle数据库，由于制度报文生成接口是由不同数据库语法编写所以在切换数据库的同时要修改对应的数据库方言配置\n- 修改pom.xml  \n\t![输入图片说明][image-42]\n**目前0.0.1-SNAPSHOT版本对应mysql;0.0.2-SNAPSHOT版本对应oracle**\n2. 修改配置文件applicationContext-jpa.xml，改为数据库所对应的接口实现类  \n\t![输入图片说明][image-43]\n3. 如果需要新加SQL实现函数，则在对应的系统模块中添加，例如  \n\t![输入图片说明][image-44]  \n\t实现自己的业务逻辑即可，然后在applicationContext-jpa.xml添加相应配置加入spring管理容器\n\n[1]:\thttps://gitee.com/mpmpal_cr/document/attach_files/download?i=96428&u=http://files.git.oschina.net/group1/M00/01/F4/PaAvDFnExYiAZBwYAAbJgGShKGQ898.rar?token=2fc273a040d2eabf77c760f50eff721b&ts=1506067947&attname=%E6%96%B0%E5%B9%B3%E5%8F%B0%E8%84%9A%E6%9C%AC.rar\n[2]:\thttps://gitee.com/mpmpal_cr/document/attach_files/download?i=98255&u=http://files.git.oschina.net/group1/M00/02/09/PaAvDFnbQGuALm5OAGF7R5HNSdg735.doc?token=a118c827b961e80c623f752ed78eb4d8&ts=1507541099&attname=PD-%E7%A7%91%E8%9E%8D%E7%BB%BC%E5%90%88%E7%BB%9F%E8%AE%A1%E5%B9%B3%E5%8F%B0%E4%BA%A7%E5%93%81-%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C_V1.0_20170928.doc\n[3]:\thttps://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0activiti%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E&parent=\n[4]:\thttps://gitee.com/mpmpal_cr/document/wikis/pages?title=git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&parent=\n[5]:\thttps://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C&parent=\n[6]:\thttp://gitee.com/mpmpal_cr/document/attach_files/download?i=102945&u=http://files.git.oschina.net/group1/M00/02/3F/PaAvDFn_1fiAEkFDAocAFD5NBjw242.rar?token=3d3e93341027b8450a17c0d4f33afc20&ts=1509938681&attname=Git%2CTortoiseGit%E5%AE%89%E8%A3%85.rar\n[7]:\thttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n\n[image-1]:\thttps://git.oschina.net/uploads/images/2017/0922/142804_a619079d_1102706.png \"图片1.png\"\n[image-2]:\thttps://git.oschina.net/uploads/images/2017/0922/142905_7ad5bb2f_1102706.png \"图片2.png\"\n[image-3]:\thttps://git.oschina.net/uploads/images/2017/0922/145015_b3e45198_1102706.png \"图片3.png\"\n[image-4]:\thttps://git.oschina.net/uploads/images/2017/0922/145035_e6b445d0_1102706.png \"图片4.png\"\n[image-5]:\thttps://git.oschina.net/uploads/images/2017/0922/173322_c8830ec5_1102706.png \"5.png\"\n[image-6]:\thttps://git.oschina.net/uploads/images/2017/0922/173652_6afc04b1_1102706.png \"6.png\"\n[image-7]:\thttps://git.oschina.net/uploads/images/2017/0922/173722_7a2ae350_1102706.png \"7.png\"\n[image-8]:\thttps://git.oschina.net/uploads/images/2017/0922/173755_dfcbb075_1102706.png \"8.png\"\n[image-9]:\thttps://git.oschina.net/uploads/images/2017/0925/095221_0b8c5fd0_1102706.png \"9.png\"\n[image-10]:\thttps://git.oschina.net/uploads/images/2017/0925/100741_ab5c641f_1102706.png \"10.png\"\n[image-11]:\thttps://git.oschina.net/uploads/images/2017/0925/101135_d4af3a5b_1102706.png \"11.png\"\n[image-12]:\thttps://git.oschina.net/uploads/images/2017/0925/113253_f27a4429_1102706.png \"12.png\"\n[image-13]:\thttps://git.oschina.net/uploads/images/2017/0925/142839_6cf3572f_1102706.png \"13.png\"\n[image-14]:\thttps://git.oschina.net/uploads/images/2017/0925/144829_27d05efd_1102706.png \"14.png\"\n[image-15]:\thttps://git.oschina.net/uploads/images/2017/0925/151904_7d519dcc_1102706.png \"15.png\"\n[image-16]:\thttps://git.oschina.net/uploads/images/2017/0925/151948_2459f713_1102706.png \"16.png\"\n[image-17]:\thttps://git.oschina.net/uploads/images/2017/0925/153251_aa9e251f_1102706.png \"17.png\"\n[image-18]:\thttps://git.oschina.net/uploads/images/2017/0925/155627_3d96691e_1102706.png \"18.png\"\n[image-19]:\thttps://git.oschina.net/uploads/images/2017/0925/155636_08b12be3_1102706.png \"19.png\"\n[image-20]:\thttps://git.oschina.net/uploads/images/2017/0830/143511_7e9c1265_1102706.png \"clipboard.png\"\n[image-21]:\thttps://git.oschina.net/uploads/images/2017/0830/143750_9390d834_1102706.png \"clipboard.png\"\n[image-22]:\thttps://git.oschina.net/uploads/images/2017/0830/143856_de604f92_1102706.png \"clipboard.png\"\n[image-23]:\thttps://git.oschina.net/uploads/images/2017/0830/144125_814b18db_1102706.png \"clipboard.png\"\n[image-24]:\thttps://git.oschina.net/uploads/images/2017/0830/144156_8ca52887_1102706.png \"clipboard.png\"\n[image-25]:\thttps://git.oschina.net/uploads/images/2017/0809/141007_8649cc82_1102706.png \"1.png\"\n[image-26]:\thttps://git.oschina.net/uploads/images/2017/0809/141102_62ed4ba4_1102706.png \"2.png\"\n[image-27]:\thttps://git.oschina.net/uploads/images/2017/0809/141225_c541dcca_1102706.png \"3.png\"\n[image-28]:\thttps://git.oschina.net/uploads/images/2017/0809/141253_9b67ac6b_1102706.png \"4.png\"\n[image-29]:\thttps://git.oschina.net/uploads/images/2017/0809/141342_3d544a50_1102706.png \"5.png\"\n[image-30]:\thttps://git.oschina.net/uploads/images/2017/0809/141411_478f2512_1102706.png \"6.png\"\n[image-31]:\thttps://git.oschina.net/uploads/images/2017/0830/152051_747dcf5e_1102706.png \"图片1.png\"\n[image-32]:\thttps://git.oschina.net/uploads/images/2017/0830/152154_1cf6e0b1_1102706.png \"图片2.png\"\n[image-33]:\thttps://git.oschina.net/uploads/images/2017/0830/152322_a4b7aeb4_1102706.png \"图片3.png\"\n[image-34]:\thttps://git.oschina.net/uploads/images/2017/0830/152917_14e372ff_1102706.png \"QQ截图20170830152553.png\"\n[image-35]:\thttps://git.oschina.net/uploads/images/2017/0830/152948_01102b7d_1102706.png \"图片4.png\"\n[image-36]:\thttps://git.oschina.net/uploads/images/2017/0830/154423_a15e4a4c_1102706.png \"图片5.png\"\n[image-37]:\thttps://git.oschina.net/uploads/images/2017/0830/160045_4a882daf_1102706.png \"图片6.png\"\n[image-38]:\thttps://git.oschina.net/uploads/images/2017/0830/160703_aa9ffc2f_1102706.png \"图片7.png\"\n[image-39]:\thttps://git.oschina.net/uploads/images/2017/0830/162413_b14e447d_1102706.png \"图片8.png\"\n[image-40]:\thttps://git.oschina.net/uploads/images/2017/0830/163109_0c571fe1_1102706.png \"图片9.png\"\n[image-41]:\thttps://git.oschina.net/uploads/images/2017/0830/163455_5036a5e5_1102706.png \"图片10.png\"\n[image-42]:\thttps://git.oschina.net/uploads/images/2017/0830/164510_7b159611_1102706.png \"图片11.png\"\n[image-43]:\thttps://git.oschina.net/uploads/images/2017/0830/164601_eb23eff4_1102706.png \"图片12.png\"\n[image-44]:\thttps://git.oschina.net/uploads/images/2017/0830/164642_efb5c1a0_1102706.png \"图片13.png\"","source":"_posts/mpmpal_cr-document.md","raw":"---\ntitle: git教程\ndate: 2017-11-20 16:16:01\ntags: git\ncategories: 干货\n---\n\n# EAST项目部署常见问题\n## 项目启动报错\n1. 保证服务器jdk版本为1.8以上\n2. 首次部署仅将fitech.war,platform.war和libs.war放入服务器中间件中，防止日志太多，异常不容易排查\n2. 查看服务器日志，发现connection异常，检查fitech中的数据库配置是否正确\n\n## 用户登录异常\n1. 检查数据脚本都正常执行了，可查看select \\* from sysuser是否有数据\n2. 访问浏览器控制台，F12，登录一下看看是否有异常，如果是404，检查platform中的fitech.js是否修改成功\n\n## 登录之后系统常见问题\n1. 不要随意直接在数据库中修改数据，会导致页面显示有问题，如果实在想操作，请先询问产品开发\n2. 系统配置中的制度配置导入时间比较久，耐心等待一会，重复导入可能会导致数据问题，查看是否成功，可在报文配置中查看数据表\n\\3. \n\n## ETL数据调度常见问题\n> 新平台EAST需要配置3个作业才可以正常运行  \n> - 数据补录作业\n1. 数据补录系统待上报报文流程存储过程（east.create\\_bl\\_task|系统内置）\n2. 数据补录系统流程开启任务（JAVA任务）\n3. EAST收据调度作业\n1. EAST待上报报文流程存储过程（east.proc\\_ledgerReport|系统内置）  \n2. 数据拉取存储过程（客户现场人员编写）  \n3. EAST流程开启任务（JAVA任务）\n7. EAST报文生成作业\n1. EAST上报报文生成任务（JAVA任务）\n\n1. 安装部署手册中的案例都是范例，请根据实际情况进行配置\n2. 调度任务有没有成功执行，可以查看控制台日志是否执行成功\n3. 数据库连接异常，可查看fitech-etl-1.0.war是否配置成功\n4. 出现数组越界，可能是作业中的任务配置有问题，可截图发给开发排查问题\n5. ETL会根据配置频度来控制执行状态，例如日频度，则当天只能执行一次，如果想多次执行，则到数据调度监控中重新执行作业，或者执行SQL手动删除ETL调度任务 例如：\n\n```ruby\nselect * from etl_job_monitor;\nselect * from ETL_TASK_MONITOR;\n\ndelete from ETL_JOB_MONITOR where yxrq = '20171020';\ndelete from ETL_TASK_MONITOR where yxrq = '20171020';\ncommit;\n```\n# EAST项目部署手册\n## 服务器环境\n- 数据库（如果是oracle需要安装oracle客户端，用作sqluldr2报文生成）\n- jdk1.8以上\n- 服务器中间件（需要支持jdk1.8）\n\n## 项目说明\n> 项目分成4个子服务，由于模块之间有相互调用，需要分先后启动，分别配置\n\n- fitech.war\n_平台主服务,处理平台业务逻辑_\n- fitech-etl-1.0.war\n_ETL调度系统服务，处理数据抽取等调度任务_\n- platform.war\n_前端主服务_\n- libs.war\n_前端框架lib包_\n\n\n\n## 项目部署\n#### 主服务部署配置\n- 将fitech.war放入服务中间件\n- 修改服务配置文件application-env.properties\n![配置文件所在位置][image-1]\n- 需要修改的配置\n![输入图片说明][image-2] \n \n1. 数据库配置，修改对应IP,端口和监听，以及用户名和密码\n2. initPassword是系统创建用户初始化密码的默认密码，根据需求修改\n3. template\\_path是系统模板存放路径，用于机构，用户等功能的模板下载\n4. ledgerRptFIle\\_tempPath和ledgerRptFIle\\_path是EAST生成报文存放的路径和临时文件生成的存放路径\n5. DBurl是sqluldr2报文生成数据链接配置\n\n#### 客户端部署配置\n- 将platform.war和libs.war放入服务中间件\n- 修改配置文件fitech.js\n![放置路径][image-3]\n![输入图片说明][image-4]\n1. pathcs是配置ETL调度系统地址\n2. path是配置主服务地址(包括服务项目名)\n\n#### 创建数据库表\n- _启动服务，主服务会自动创建系统表_ \n- [下载脚本][1]\n- 执行初始化数据  \n- EAST3.0初始化脚本.sql（初始化条线，角色等基础信息）\n- EAST脱敏函数.sql（初始化脱敏函数，复制该脚本中的函数依次执行）  \n- EAST脱敏公式.sql（初始化脱敏公式）\n- 拉链表存储过程.sql（初始化拉链表存储过程，复制该脚本中的存储过程依次执行）\n- ETL初始化脚本.sql（初始化ETL基础数据）\n- ETL存储过程.sql（ETL存储过程）\n- ETD指标建表语句.sql（根据需求执行，免费的10个指标）\n- ETD初始化数据.sql（根据需求执行，免费的10个指标）\n- 数据补录系统存储过程.sql（数据补录系统存储过程）\n- 数据补录初始化脚本.sql（数据补录系统初始化脚本）\n- 初始化EAST3.0校验公式（validata\\_rule05.sql脚本中有N个变量，根据提示进行输入。输入&&+变量,如：&&CHANGE）\n- 将template文件夹下的excel放到application-env.properties配置文件下的template\\_path路径下，用于模板下载\n\n#### 启动项目\n- 启动服务器中间件\n- 打开浏览器访问http://IP:port/platform\n- 访问成功，点击登录使用superadmin登录，密码123456进行登录\n\n#### 配置业务制度\n- 进入系统配置》制度管理\n![输入图片说明][image-5]\n- 进入银监标准化业务条线》手工配置\n![输入图片说明][image-6]\n- 新增一个制度\n![输入图片说明][image-7]\n- 点击批量载入，选择系统导入文件夹下的EASTtemplate0530.xlsx和fields.xlsx，点击确定，待导入完成后，可生成EAST的58张数据表\n![输入图片说明][image-8]\n- 进入报文配置功能，查看报文是否生成成功，如果成功可进入操作手册进行机构，用户，角色等业务配置\n\n#### 数据配置\n- 系统需要现场实施人员根据客户现场情况创建机构，角色和用户信息\n- 机构信息配置\n- 角色信息配置\n- 用户信息配置\n- 流程信息配置（重要，ETL数据调度流程需要此步骤）  \n\t [详见用户操作手册][2]\n\n#### 配置ETL调度任务\n- 进入业务条线 》 数据调度\n![数据调度][image-9]\n- 进入‘作业分类’菜单，新建一个‘作业分类’，用于管理系统调度作业\n- 进入‘作业管理’菜单，在新建的作业分类下创建调度作业，用于数据调度；例如：\n![输入图片说明][image-10]\n1. 新增作业；例如：\n![输入图片说明][image-11]\n> 选择当前调度作业 _目前仅支持shell脚本和存储过程_  \n> 配置作业频度之后，只有满足当前配置的启动条件，调度作业才会启动 _shell和存储过程必须要有回调true/false_  \n\n- 进入‘任务管理’菜单，用于配置调度作业所需要的任务；例如：\n![输入图片说明][image-12]  \n- 选择任务类型新建任务  \n1.新建procedure存储过程任务；例如：\n![输入图片说明][image-13]  \n_所有的存储过程必须要有回调函数true/false;例如：_\n\n```ruby\ncreate or replace procedure testproc(term in VARCHAR2, result OUT varchar)\nas\n  CURSOR c1 IS\nselect l.id, t.tablename, i.institutionid\n      from ledgerreport l\n      left join ledgerrpttemplate t\n        on l.ledgerreporttemplate_id = t.id\n      left join institution i\n        on l.institution_id = i.id\n     where l.submitstatetype = '2'\n       and l.term = term\n       and  i.institutionid='3011';\nbegin\nFOR acct IN c1 LOOP\n   update test.t_gx_ygb set reportid = acct.id\n\n where nbjgh = '3011';\n  insert into yjbzh.t_gx_ygb\n    select SEQ_FITECH.nextval id,REPORTID,CJRQ,GWBH,YGZT,YXJGMC,ZW,YXJGDM,SFZH,XM,JRXKZH,SSBM,WDH,LXDH,GH,NBJGH,SYNCABLE from test.t_gx_ygb;\n    END LOOP;\n  commit;\n  result := 'true';\nexception\n  when storage_error then\n    result := 'false';\n  when others then\n    result := 'false';\nend testproc;\n\n```\n\n\n2.新加java调度任务；例如：\n![输入图片说明][image-14]\n> 新平台EAST需要配置3个作业才可以正常运行  \n> - 数据补录作业\n1. 数据补录系统待上报报文流程存储过程（east.create\\_bl\\_task|系统内置）\n2. 数据补录系统流程开启任务（JAVA任务）\n3. EAST收据调度作业\n1. EAST待上报报文流程存储过程（east.proc\\_ledgerReport|系统内置）  \n2. 数据拉取存储过程（客户现场人员编写）  \n3. EAST流程开启任务（JAVA任务）\n7. EAST报文生成作业\n1. EAST上报报文生成任务（JAVA任务）\n\n_作业任务为Java任务的实例如下_\n- EAST流程开启任务（POST请求）  \n\t\\`\\`\\`ruby\n类名：com.fitechsoft.util.HttpRequest\n方法名：sendPost\nURL：http://IP:端口/项目名/task/startProcess/\n```\n- EAST上报报文生成任务（GET请求）  \n```ruby\n类名：com.fitechsoft.util.HttpRequest\n方法名：sendGet\nURL：http://IP:端口/项目名/ledgerReportFile/reportFileGenerated/create\n```\n- 数据补录系统流程开启任务（POST请求）\n```ruby\n类名：com.fitechsoft.util.HttpRequest\n方法名：sendPost\nURL:http://IP:端口/项目名/accountTask/startProcess/\n```\n\n- 进入‘作业管理’ 将任务管理中创建的任务配置到作业中\n- 选择你要维护的作业，点击作业维护\n![输入图片说明][image-15]\n2. 添加新步骤，将任务配置到作业管理中\n![输入图片说明][image-16]\n\n#### 部署ETL调度任务\n- 将fitech-etl-1.0.war放入应用服务器中间件中\n- 修改ETL系统配置\n![输入图片说明][image-17]\n- config.properties 修改ETL调度任务配置数据库\n![输入图片说明][image-18]\n- config1.properties 修改ETL调度任务存储过程数据表配置\n![输入图片说明][image-19]\n- 启动服务，控制台正常启动即可，操作员登录系统，查看代办任务是否有数据，有数据即可\n# Home\n1. [新平台activiti参数说明][3]\n2. [git安装教程][4]\n3. [新平台开发手册][5]\n# git安装教程\n### 安装介质\n- Git-1.9.5-preview20150319.exe\n- TortoiseGit-1.8.14.0-64bit.msi\n- Tor4toiseGit-LanguagePack-1.8.14.0-64bit-zh\\_CN.msi  \n\t[下载][6]\n\n### 基本配置\n1. 配置SSH密钥\n![配置SSH密钥][image-20]\n2. 找到生成的git授权KEY,路径默认生成在 _C:\\Users\\rui\\.ssh_\n![git授权KEY][image-21]\n3. 配置TortoiseGit\n![输入图片说明][image-22]\n![输入图片说明][image-23]\n![输入图片说明][image-24]\n\n### 常用语法\n- 查看当前git仓库获取和提交服务地址\n``` ruby\ngit remote -v\n```\n- 查看所有分支\n``` ruby\ngit branch\n```\n- 创建分支\n``` ruby\ngit branch dev\n```\n- 删除分支\n``` ruby\ngit branch -d dev\n```\n- 切换分支\n``` ruby\ngit checkout dev\n```\n- 创建并切换\n``` ruby\ngit checkout -b dev\n```\n- 查看工作区修改文件\n``` ruby\ngit status\n```\n- 查看修改内容\n``` ruby\ngit diff\n```\n- 添加修改到缓存区\n``` ruby\ngit add ***\ngit add -A\n```\n- 版本提交\n``` ruby\ngit commit -m \"branch test\"\n```\n- 合并分支dev到当前分支\n``` ruby\ngit merge dev\n```\n- 指定定远程版本更新到本地指定版本\n``` ruby\ngit pull <远程主机名> <远程分支名>:<本地分支名>\ngit pull origin dev:master\n```\n- 将当前分支提交到远程分支\n``` ruby\ngit push <远程主机名> <远程分支名>\ngit push origin dev\n```\n- 切换git地址\n``` ruby\n1. git remote rm origin\n2. git remote add origin git@github.com:yuquan0821/demo.git\n3. git push origin\n```\n **GIT教程** \n- [网络教程][7]\n\n# oracle数据导出工具sqluldr2配置\n### 安装步骤\n1. 由于sqluldr2是基于oracle客户端的一个插件，则需要在平台服务端安装oracle\\_client\n2. 下载sqluldr2.bin（根据操作系统自行判定版本）到$ORACLE\\_HOME的bin目录，重命名为sqluldr2.bin\n3. 修改oracle安装$HOME目录下.bash\\_profile 增加如下环境变量\n```ruby\nexport LD_LIBRARY_PATH=$ORACLE_HOME/bin:$ORACLE_HOME/lib:/lib:/usr/lib \n```\n4. 执行 sqluldr2.bin 执行成功即可\n# 新平台activiti参数说明\n### activiti配置\n1. 新建bpmn流程\n2. 绘制流程图，具体画法网上有\n3. 设置流程参数\n\t- 配置流程图ID ; name ; namespaces属性（自定义）;\n![输入图片说明][image-25]\n\t- 配置启动监听（该监听为自定义，平台已经初始化一个，无特殊需求可直接使用）\n![输入图片说明][image-26]\n\t- 配置任务节点属性\n\t  1. 配置ID和name(此ID有特殊用处)\n![输入图片说明][image-27]\n\t  2. 配置指派角色和督办角色，\n\t    - 变量规则：${任务节点ID_assignee};${任务节点ID_supervise}\n![输入图片说明][image-28]\n\t  3. 设置任务节点参数\n\t    - argname: 路由KEY，固定为input\n\t    - argvalues: 页面按钮参数，几个路由跳转几个参数，可自定义\n\t    - handleEntry 当前任务节点页面路由地址\n\t    - completeEntry 暂时为空，预留\n\t    - isAssign:是否支持任务转派， ${任务节点ID_isAssign}\n![输入图片说明][image-29]\n\t  4. 路由扭转控制参数\n\t    - 设定页面跳转路由参数${input=='refuse'}\n\t    - 说明 input:为步骤三中argname 的参数，无明显需求暂统一定义为input\n\t    - 说明'refuse' 为步骤三中argvalues参数中定义的value，指定下一节点跳转\n![输入图片说明][image-30]\n# 新平台开发手册\n### 开发环境\n- 开发工具IDE：IntelliJ IDEA/Eclipse\n- 数据库：mysql/oracle\n- JDK:1.8\n- 版本管理工具：GIT\n- 项目管理工具：MAVEN\n\n### 开发规范\n- 项目包名:com.fitech.功能名.项目名\n- 项目类名:\n\t- 领域模型：根据领域模型实际意义创建（能用英文标识的必须使用英文，无法使用英文标识的用拼音首字母创建类名，首字母必须大写)\n\t- 持久化层：领域模型名+Repository\n\t- 业务层：\n\t\t1. 接口：领域模型名+Service\n\t\t2. 实现：领域模型名+ServiceImpl\n\n- 注释:\n- 类名注释：当前类的中文描述+作者  \n\t![类名注释][image-31]\n- 接口名注释：当前接口作用+入参说明+出参说明  \n\t![接口注释][image-32]\n- 业务代码注释：每10行必须有至少有一个注释，业务复杂的3行内要有注释，判断条件（if）必须有注释\n- 预留接口，预留逻辑必须使用//TODO进行标记，并且加上备\n- 如果修改业务逻辑代码，在修改处添加备注，标识修改原因，修改时间和修改人  \n\t![修改说明][image-33]\n\n- 测试用例\n- 每个模块有独立的测试用例配置文件，放置位置在  \n\t![测试用例配置文件][image-34]\n- 每个业务逻辑添加单元测试，测试通过再提交代码  \n\t![测试用例][image-35]\n\n- GIT代码管理\n- 仓库中默认版本master，是我们开发版本\n- 本地更新后，创建本地开发版本dev   (git checkout -b dev)\n- 本地开发完成并测试通过后提交本地仓库\n- 切换版本到master （git checkout master）\n- 更新最新的开发版本\n- 合并DEV版本到master （git merge dev）\n- 确定无冲突之后提交远程仓库\n\n### 技术说明\n- domain说明  \n\t![domain][image-36]\n- 添加注释@entity\n- 主体继承FBSubject,客体继承FBObject\n- 每个字段属性添加@Description(\"角色名称\")注解，方便后期功能扩充\n- service说明  \n\t![service][image-37]\n- 添加@Service注解，加入spring容器管理\n- 添加@ServiceTrace注解，系统会自动管理service接口日志，记录到logback  \n\t![输入图片说明][image-38]\n- 接口的增删改操作需要捕获reporsitory发生的异常，然后throw出appException异常，这个是自定义异常，统一处理系统异常，记录logback,可自定义入参，第一个是异常码，可自定义，第二个是系统异常，可自定义;\n- 对于一个服务接口有2个及以上“增”“删”“改”操作的，需要添加事务@Transactional\n- controller说明  \n\t![controller][image-39]\n- 添加控制层上添加@RequestMapping ，定位当前接口位置，便于后期权限控制  \n\t![输入图片说明][image-40]\n- controller回调GenericResult\\<?\\>封装回调函数，里面有当前请求是否成功，成功状态，异常状态，异常码，数据集对象等，系统回封装成json返回前端;\n- controller中需要记录用户的操作日志，可以只对增删改操作记录，查询根据具体情况记录，addOperateLog第一个为日志信息，自定义，第二个是请求上下文对象，系统需要根据请求上下文获取登录用户信息和IP等;\n- 操作日志需要在finally中记录，防止系统异常没有记录;\n- war 说明\n![war ][image-41]\n1. Activiti.cfg.xml：activiti流程引擎配置\n2. applicationContext-jpa.xml：配置持久化层springdata配置\n3. applicationContext.xml：spring相关配置\n4. Security.cfg.xml：权限框架springsecutity相关配置\n5. secutityAcl.cfg.xml：数据权限acl相关配置\n6. Spring-mvc.xml\n7. Springbatch-content\n8. Application-evn.properties:数据源配置及其他的一些参数配置\n9. Logback.xml：配置系统日志，\n> 注：可根据具体需求进行配置修改\n### 开发注意事项\n1. clean install -Dmaven.test.skip=true 模块编译\n2. jetty:run 项目执行\n### 数据库版本切换\n- 目前系统支持mysql和Oracle数据库，由于制度报文生成接口是由不同数据库语法编写所以在切换数据库的同时要修改对应的数据库方言配置\n- 修改pom.xml  \n\t![输入图片说明][image-42]\n**目前0.0.1-SNAPSHOT版本对应mysql;0.0.2-SNAPSHOT版本对应oracle**\n2. 修改配置文件applicationContext-jpa.xml，改为数据库所对应的接口实现类  \n\t![输入图片说明][image-43]\n3. 如果需要新加SQL实现函数，则在对应的系统模块中添加，例如  \n\t![输入图片说明][image-44]  \n\t实现自己的业务逻辑即可，然后在applicationContext-jpa.xml添加相应配置加入spring管理容器\n\n[1]:\thttps://gitee.com/mpmpal_cr/document/attach_files/download?i=96428&u=http://files.git.oschina.net/group1/M00/01/F4/PaAvDFnExYiAZBwYAAbJgGShKGQ898.rar?token=2fc273a040d2eabf77c760f50eff721b&ts=1506067947&attname=%E6%96%B0%E5%B9%B3%E5%8F%B0%E8%84%9A%E6%9C%AC.rar\n[2]:\thttps://gitee.com/mpmpal_cr/document/attach_files/download?i=98255&u=http://files.git.oschina.net/group1/M00/02/09/PaAvDFnbQGuALm5OAGF7R5HNSdg735.doc?token=a118c827b961e80c623f752ed78eb4d8&ts=1507541099&attname=PD-%E7%A7%91%E8%9E%8D%E7%BB%BC%E5%90%88%E7%BB%9F%E8%AE%A1%E5%B9%B3%E5%8F%B0%E4%BA%A7%E5%93%81-%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C_V1.0_20170928.doc\n[3]:\thttps://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0activiti%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E&parent=\n[4]:\thttps://gitee.com/mpmpal_cr/document/wikis/pages?title=git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&parent=\n[5]:\thttps://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C&parent=\n[6]:\thttp://gitee.com/mpmpal_cr/document/attach_files/download?i=102945&u=http://files.git.oschina.net/group1/M00/02/3F/PaAvDFn_1fiAEkFDAocAFD5NBjw242.rar?token=3d3e93341027b8450a17c0d4f33afc20&ts=1509938681&attname=Git%2CTortoiseGit%E5%AE%89%E8%A3%85.rar\n[7]:\thttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n\n[image-1]:\thttps://git.oschina.net/uploads/images/2017/0922/142804_a619079d_1102706.png \"图片1.png\"\n[image-2]:\thttps://git.oschina.net/uploads/images/2017/0922/142905_7ad5bb2f_1102706.png \"图片2.png\"\n[image-3]:\thttps://git.oschina.net/uploads/images/2017/0922/145015_b3e45198_1102706.png \"图片3.png\"\n[image-4]:\thttps://git.oschina.net/uploads/images/2017/0922/145035_e6b445d0_1102706.png \"图片4.png\"\n[image-5]:\thttps://git.oschina.net/uploads/images/2017/0922/173322_c8830ec5_1102706.png \"5.png\"\n[image-6]:\thttps://git.oschina.net/uploads/images/2017/0922/173652_6afc04b1_1102706.png \"6.png\"\n[image-7]:\thttps://git.oschina.net/uploads/images/2017/0922/173722_7a2ae350_1102706.png \"7.png\"\n[image-8]:\thttps://git.oschina.net/uploads/images/2017/0922/173755_dfcbb075_1102706.png \"8.png\"\n[image-9]:\thttps://git.oschina.net/uploads/images/2017/0925/095221_0b8c5fd0_1102706.png \"9.png\"\n[image-10]:\thttps://git.oschina.net/uploads/images/2017/0925/100741_ab5c641f_1102706.png \"10.png\"\n[image-11]:\thttps://git.oschina.net/uploads/images/2017/0925/101135_d4af3a5b_1102706.png \"11.png\"\n[image-12]:\thttps://git.oschina.net/uploads/images/2017/0925/113253_f27a4429_1102706.png \"12.png\"\n[image-13]:\thttps://git.oschina.net/uploads/images/2017/0925/142839_6cf3572f_1102706.png \"13.png\"\n[image-14]:\thttps://git.oschina.net/uploads/images/2017/0925/144829_27d05efd_1102706.png \"14.png\"\n[image-15]:\thttps://git.oschina.net/uploads/images/2017/0925/151904_7d519dcc_1102706.png \"15.png\"\n[image-16]:\thttps://git.oschina.net/uploads/images/2017/0925/151948_2459f713_1102706.png \"16.png\"\n[image-17]:\thttps://git.oschina.net/uploads/images/2017/0925/153251_aa9e251f_1102706.png \"17.png\"\n[image-18]:\thttps://git.oschina.net/uploads/images/2017/0925/155627_3d96691e_1102706.png \"18.png\"\n[image-19]:\thttps://git.oschina.net/uploads/images/2017/0925/155636_08b12be3_1102706.png \"19.png\"\n[image-20]:\thttps://git.oschina.net/uploads/images/2017/0830/143511_7e9c1265_1102706.png \"clipboard.png\"\n[image-21]:\thttps://git.oschina.net/uploads/images/2017/0830/143750_9390d834_1102706.png \"clipboard.png\"\n[image-22]:\thttps://git.oschina.net/uploads/images/2017/0830/143856_de604f92_1102706.png \"clipboard.png\"\n[image-23]:\thttps://git.oschina.net/uploads/images/2017/0830/144125_814b18db_1102706.png \"clipboard.png\"\n[image-24]:\thttps://git.oschina.net/uploads/images/2017/0830/144156_8ca52887_1102706.png \"clipboard.png\"\n[image-25]:\thttps://git.oschina.net/uploads/images/2017/0809/141007_8649cc82_1102706.png \"1.png\"\n[image-26]:\thttps://git.oschina.net/uploads/images/2017/0809/141102_62ed4ba4_1102706.png \"2.png\"\n[image-27]:\thttps://git.oschina.net/uploads/images/2017/0809/141225_c541dcca_1102706.png \"3.png\"\n[image-28]:\thttps://git.oschina.net/uploads/images/2017/0809/141253_9b67ac6b_1102706.png \"4.png\"\n[image-29]:\thttps://git.oschina.net/uploads/images/2017/0809/141342_3d544a50_1102706.png \"5.png\"\n[image-30]:\thttps://git.oschina.net/uploads/images/2017/0809/141411_478f2512_1102706.png \"6.png\"\n[image-31]:\thttps://git.oschina.net/uploads/images/2017/0830/152051_747dcf5e_1102706.png \"图片1.png\"\n[image-32]:\thttps://git.oschina.net/uploads/images/2017/0830/152154_1cf6e0b1_1102706.png \"图片2.png\"\n[image-33]:\thttps://git.oschina.net/uploads/images/2017/0830/152322_a4b7aeb4_1102706.png \"图片3.png\"\n[image-34]:\thttps://git.oschina.net/uploads/images/2017/0830/152917_14e372ff_1102706.png \"QQ截图20170830152553.png\"\n[image-35]:\thttps://git.oschina.net/uploads/images/2017/0830/152948_01102b7d_1102706.png \"图片4.png\"\n[image-36]:\thttps://git.oschina.net/uploads/images/2017/0830/154423_a15e4a4c_1102706.png \"图片5.png\"\n[image-37]:\thttps://git.oschina.net/uploads/images/2017/0830/160045_4a882daf_1102706.png \"图片6.png\"\n[image-38]:\thttps://git.oschina.net/uploads/images/2017/0830/160703_aa9ffc2f_1102706.png \"图片7.png\"\n[image-39]:\thttps://git.oschina.net/uploads/images/2017/0830/162413_b14e447d_1102706.png \"图片8.png\"\n[image-40]:\thttps://git.oschina.net/uploads/images/2017/0830/163109_0c571fe1_1102706.png \"图片9.png\"\n[image-41]:\thttps://git.oschina.net/uploads/images/2017/0830/163455_5036a5e5_1102706.png \"图片10.png\"\n[image-42]:\thttps://git.oschina.net/uploads/images/2017/0830/164510_7b159611_1102706.png \"图片11.png\"\n[image-43]:\thttps://git.oschina.net/uploads/images/2017/0830/164601_eb23eff4_1102706.png \"图片12.png\"\n[image-44]:\thttps://git.oschina.net/uploads/images/2017/0830/164642_efb5c1a0_1102706.png \"图片13.png\"","slug":"mpmpal_cr-document","published":1,"updated":"2017-11-22T10:24:44.000Z","_id":"cjaawjgi90001ils6vh58b93g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"EAST项目部署常见问题\"><a href=\"#EAST项目部署常见问题\" class=\"headerlink\" title=\"EAST项目部署常见问题\"></a>EAST项目部署常见问题</h1><h2 id=\"项目启动报错\"><a href=\"#项目启动报错\" class=\"headerlink\" title=\"项目启动报错\"></a>项目启动报错</h2><ol>\n<li>保证服务器jdk版本为1.8以上</li>\n<li>首次部署仅将fitech.war,platform.war和libs.war放入服务器中间件中，防止日志太多，异常不容易排查</li>\n<li>查看服务器日志，发现connection异常，检查fitech中的数据库配置是否正确</li>\n</ol>\n<h2 id=\"用户登录异常\"><a href=\"#用户登录异常\" class=\"headerlink\" title=\"用户登录异常\"></a>用户登录异常</h2><ol>\n<li>检查数据脚本都正常执行了，可查看select * from sysuser是否有数据</li>\n<li>访问浏览器控制台，F12，登录一下看看是否有异常，如果是404，检查platform中的fitech.js是否修改成功</li>\n</ol>\n<h2 id=\"登录之后系统常见问题\"><a href=\"#登录之后系统常见问题\" class=\"headerlink\" title=\"登录之后系统常见问题\"></a>登录之后系统常见问题</h2><ol>\n<li>不要随意直接在数据库中修改数据，会导致页面显示有问题，如果实在想操作，请先询问产品开发</li>\n<li>系统配置中的制度配置导入时间比较久，耐心等待一会，重复导入可能会导致数据问题，查看是否成功，可在报文配置中查看数据表<br>\\3. </li>\n</ol>\n<h2 id=\"ETL数据调度常见问题\"><a href=\"#ETL数据调度常见问题\" class=\"headerlink\" title=\"ETL数据调度常见问题\"></a>ETL数据调度常见问题</h2><blockquote>\n<p>新平台EAST需要配置3个作业才可以正常运行  </p>\n<ul>\n<li>数据补录作业</li>\n</ul>\n<ol>\n<li>数据补录系统待上报报文流程存储过程（east.create_bl_task|系统内置）</li>\n<li>数据补录系统流程开启任务（JAVA任务）</li>\n<li>EAST收据调度作业</li>\n<li>EAST待上报报文流程存储过程（east.proc_ledgerReport|系统内置）  </li>\n<li>数据拉取存储过程（客户现场人员编写）  </li>\n<li>EAST流程开启任务（JAVA任务）</li>\n<li>EAST报文生成作业</li>\n<li>EAST上报报文生成任务（JAVA任务）</li>\n</ol>\n</blockquote>\n<ol>\n<li>安装部署手册中的案例都是范例，请根据实际情况进行配置</li>\n<li>调度任务有没有成功执行，可以查看控制台日志是否执行成功</li>\n<li>数据库连接异常，可查看fitech-etl-1.0.war是否配置成功</li>\n<li>出现数组越界，可能是作业中的任务配置有问题，可截图发给开发排查问题</li>\n<li>ETL会根据配置频度来控制执行状态，例如日频度，则当天只能执行一次，如果想多次执行，则到数据调度监控中重新执行作业，或者执行SQL手动删除ETL调度任务 例如：</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from etl_job_monitor;</span><br><span class=\"line\">select * from ETL_TASK_MONITOR;</span><br><span class=\"line\"></span><br><span class=\"line\">delete from ETL_JOB_MONITOR where yxrq = <span class=\"string\">'20171020'</span>;</span><br><span class=\"line\">delete from ETL_TASK_MONITOR where yxrq = <span class=\"string\">'20171020'</span>;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<h1 id=\"EAST项目部署手册\"><a href=\"#EAST项目部署手册\" class=\"headerlink\" title=\"EAST项目部署手册\"></a>EAST项目部署手册</h1><h2 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h2><ul>\n<li>数据库（如果是oracle需要安装oracle客户端，用作sqluldr2报文生成）</li>\n<li>jdk1.8以上</li>\n<li>服务器中间件（需要支持jdk1.8）</li>\n</ul>\n<h2 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h2><blockquote>\n<p>项目分成4个子服务，由于模块之间有相互调用，需要分先后启动，分别配置</p>\n</blockquote>\n<ul>\n<li>fitech.war<br><em>平台主服务,处理平台业务逻辑</em></li>\n<li>fitech-etl-1.0.war<br><em>ETL调度系统服务，处理数据抽取等调度任务</em></li>\n<li>platform.war<br><em>前端主服务</em></li>\n<li>libs.war<br><em>前端框架lib包</em></li>\n</ul>\n<h2 id=\"项目部署\"><a href=\"#项目部署\" class=\"headerlink\" title=\"项目部署\"></a>项目部署</h2><h4 id=\"主服务部署配置\"><a href=\"#主服务部署配置\" class=\"headerlink\" title=\"主服务部署配置\"></a>主服务部署配置</h4><ul>\n<li>将fitech.war放入服务中间件</li>\n<li>修改服务配置文件application-env.properties<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/142804_a619079d_1102706.png\" alt=\"配置文件所在位置\" title=\"图片1.png\"></li>\n<li>需要修改的配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/142905_7ad5bb2f_1102706.png\" alt=\"输入图片说明\" title=\"图片2.png\"> </li>\n</ul>\n<ol>\n<li>数据库配置，修改对应IP,端口和监听，以及用户名和密码</li>\n<li>initPassword是系统创建用户初始化密码的默认密码，根据需求修改</li>\n<li>template_path是系统模板存放路径，用于机构，用户等功能的模板下载</li>\n<li>ledgerRptFIle_tempPath和ledgerRptFIle_path是EAST生成报文存放的路径和临时文件生成的存放路径</li>\n<li>DBurl是sqluldr2报文生成数据链接配置</li>\n</ol>\n<h4 id=\"客户端部署配置\"><a href=\"#客户端部署配置\" class=\"headerlink\" title=\"客户端部署配置\"></a>客户端部署配置</h4><ul>\n<li>将platform.war和libs.war放入服务中间件</li>\n<li>修改配置文件fitech.js<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/145015_b3e45198_1102706.png\" alt=\"放置路径\" title=\"图片3.png\"><br><img src=\"https://git.oschina.net/uploads/images/2017/0922/145035_e6b445d0_1102706.png\" alt=\"输入图片说明\" title=\"图片4.png\"></li>\n</ul>\n<ol>\n<li>pathcs是配置ETL调度系统地址</li>\n<li>path是配置主服务地址(包括服务项目名)</li>\n</ol>\n<h4 id=\"创建数据库表\"><a href=\"#创建数据库表\" class=\"headerlink\" title=\"创建数据库表\"></a>创建数据库表</h4><ul>\n<li><em>启动服务，主服务会自动创建系统表</em> </li>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/attach_files/download?i=96428&amp;u=http://files.git.oschina.net/group1/M00/01/F4/PaAvDFnExYiAZBwYAAbJgGShKGQ898.rar?token=2fc273a040d2eabf77c760f50eff721b&amp;ts=1506067947&amp;attname=%E6%96%B0%E5%B9%B3%E5%8F%B0%E8%84%9A%E6%9C%AC.rar\" target=\"_blank\" rel=\"noopener\">下载脚本</a></li>\n<li>执行初始化数据  </li>\n<li>EAST3.0初始化脚本.sql（初始化条线，角色等基础信息）</li>\n<li>EAST脱敏函数.sql（初始化脱敏函数，复制该脚本中的函数依次执行）  </li>\n<li>EAST脱敏公式.sql（初始化脱敏公式）</li>\n<li>拉链表存储过程.sql（初始化拉链表存储过程，复制该脚本中的存储过程依次执行）</li>\n<li>ETL初始化脚本.sql（初始化ETL基础数据）</li>\n<li>ETL存储过程.sql（ETL存储过程）</li>\n<li>ETD指标建表语句.sql（根据需求执行，免费的10个指标）</li>\n<li>ETD初始化数据.sql（根据需求执行，免费的10个指标）</li>\n<li>数据补录系统存储过程.sql（数据补录系统存储过程）</li>\n<li>数据补录初始化脚本.sql（数据补录系统初始化脚本）</li>\n<li>初始化EAST3.0校验公式（validata_rule05.sql脚本中有N个变量，根据提示进行输入。输入&amp;&amp;+变量,如：&amp;&amp;CHANGE）</li>\n<li>将template文件夹下的excel放到application-env.properties配置文件下的template_path路径下，用于模板下载</li>\n</ul>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><ul>\n<li>启动服务器中间件</li>\n<li>打开浏览器访问<a href=\"http://IP:port/platform\" target=\"_blank\" rel=\"noopener\">http://IP:port/platform</a></li>\n<li>访问成功，点击登录使用superadmin登录，密码123456进行登录</li>\n</ul>\n<h4 id=\"配置业务制度\"><a href=\"#配置业务制度\" class=\"headerlink\" title=\"配置业务制度\"></a>配置业务制度</h4><ul>\n<li>进入系统配置》制度管理<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173322_c8830ec5_1102706.png\" alt=\"输入图片说明\" title=\"5.png\"></li>\n<li>进入银监标准化业务条线》手工配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173652_6afc04b1_1102706.png\" alt=\"输入图片说明\" title=\"6.png\"></li>\n<li>新增一个制度<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173722_7a2ae350_1102706.png\" alt=\"输入图片说明\" title=\"7.png\"></li>\n<li>点击批量载入，选择系统导入文件夹下的EASTtemplate0530.xlsx和fields.xlsx，点击确定，待导入完成后，可生成EAST的58张数据表<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173755_dfcbb075_1102706.png\" alt=\"输入图片说明\" title=\"8.png\"></li>\n<li>进入报文配置功能，查看报文是否生成成功，如果成功可进入操作手册进行机构，用户，角色等业务配置</li>\n</ul>\n<h4 id=\"数据配置\"><a href=\"#数据配置\" class=\"headerlink\" title=\"数据配置\"></a>数据配置</h4><ul>\n<li>系统需要现场实施人员根据客户现场情况创建机构，角色和用户信息</li>\n<li>机构信息配置</li>\n<li>角色信息配置</li>\n<li>用户信息配置</li>\n<li>流程信息配置（重要，ETL数据调度流程需要此步骤）<br>   <a href=\"https://gitee.com/mpmpal_cr/document/attach_files/download?i=98255&amp;u=http://files.git.oschina.net/group1/M00/02/09/PaAvDFnbQGuALm5OAGF7R5HNSdg735.doc?token=a118c827b961e80c623f752ed78eb4d8&amp;ts=1507541099&amp;attname=PD-%E7%A7%91%E8%9E%8D%E7%BB%BC%E5%90%88%E7%BB%9F%E8%AE%A1%E5%B9%B3%E5%8F%B0%E4%BA%A7%E5%93%81-%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C_V1.0_20170928.doc\" target=\"_blank\" rel=\"noopener\">详见用户操作手册</a></li>\n</ul>\n<h4 id=\"配置ETL调度任务\"><a href=\"#配置ETL调度任务\" class=\"headerlink\" title=\"配置ETL调度任务\"></a>配置ETL调度任务</h4><ul>\n<li>进入业务条线 》 数据调度<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/095221_0b8c5fd0_1102706.png\" alt=\"数据调度\" title=\"9.png\"></li>\n<li>进入‘作业分类’菜单，新建一个‘作业分类’，用于管理系统调度作业</li>\n<li>进入‘作业管理’菜单，在新建的作业分类下创建调度作业，用于数据调度；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/100741_ab5c641f_1102706.png\" alt=\"输入图片说明\" title=\"10.png\"></li>\n</ul>\n<ol>\n<li>新增作业；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/101135_d4af3a5b_1102706.png\" alt=\"输入图片说明\" title=\"11.png\"><blockquote>\n<p>选择当前调度作业 <em>目前仅支持shell脚本和存储过程</em><br>配置作业频度之后，只有满足当前配置的启动条件，调度作业才会启动 <em>shell和存储过程必须要有回调true/false</em>  </p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>进入‘任务管理’菜单，用于配置调度作业所需要的任务；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/113253_f27a4429_1102706.png\" alt=\"输入图片说明\" title=\"12.png\">  </li>\n<li>选择任务类型新建任务<br>1.新建procedure存储过程任务；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/142839_6cf3572f_1102706.png\" alt=\"输入图片说明\" title=\"13.png\"><br><em>所有的存储过程必须要有回调函数true/false;例如：</em></li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create <span class=\"keyword\">or</span> replace procedure testproc(term <span class=\"keyword\">in</span> VARCHAR2, result OUT varchar)</span><br><span class=\"line\">as</span><br><span class=\"line\">  CURSOR c1 IS</span><br><span class=\"line\">select l.id, t.tablename, i.institutionid</span><br><span class=\"line\">      from ledgerreport l</span><br><span class=\"line\">      left join ledgerrpttemplate t</span><br><span class=\"line\">        on l.ledgerreporttemplate_id = t.id</span><br><span class=\"line\">      left join institution i</span><br><span class=\"line\">        on l.institution_id = i.id</span><br><span class=\"line\">     where l.submitstatetype = <span class=\"string\">'2'</span></span><br><span class=\"line\">       <span class=\"keyword\">and</span> l.term = term</span><br><span class=\"line\">       <span class=\"keyword\">and</span>  i.institutionid=<span class=\"string\">'3011'</span>;</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">FOR acct IN c1 LOOP</span><br><span class=\"line\">   update test.t_gx_ygb set reportid = acct.id</span><br><span class=\"line\"></span><br><span class=\"line\"> where nbjgh = <span class=\"string\">'3011'</span>;</span><br><span class=\"line\">  insert into yjbzh.t_gx_ygb</span><br><span class=\"line\">    select SEQ_FITECH.nextval id,REPORTID,CJRQ,GWBH,YGZT,YXJGMC,ZW,YXJGDM,SFZH,XM,JRXKZH,SSBM,WDH,LXDH,GH,NBJGH,SYNCABLE from test.t_gx_ygb;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  commit;</span><br><span class=\"line\">  result <span class=\"symbol\">:</span>= <span class=\"string\">'true'</span>;</span><br><span class=\"line\">exception</span><br><span class=\"line\">  <span class=\"keyword\">when</span> storage_error <span class=\"keyword\">then</span></span><br><span class=\"line\">    result <span class=\"symbol\">:</span>= <span class=\"string\">'false'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">when</span> others <span class=\"keyword\">then</span></span><br><span class=\"line\">    result <span class=\"symbol\">:</span>= <span class=\"string\">'false'</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> testproc;</span><br></pre></td></tr></table></figure>\n<p>2.新加java调度任务；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/144829_27d05efd_1102706.png\" alt=\"输入图片说明\" title=\"14.png\"></p>\n<blockquote>\n<p>新平台EAST需要配置3个作业才可以正常运行  </p>\n<ul>\n<li>数据补录作业</li>\n</ul>\n<ol>\n<li>数据补录系统待上报报文流程存储过程（east.create_bl_task|系统内置）</li>\n<li>数据补录系统流程开启任务（JAVA任务）</li>\n<li>EAST收据调度作业</li>\n<li>EAST待上报报文流程存储过程（east.proc_ledgerReport|系统内置）  </li>\n<li>数据拉取存储过程（客户现场人员编写）  </li>\n<li>EAST流程开启任务（JAVA任务）</li>\n<li>EAST报文生成作业</li>\n<li>EAST上报报文生成任务（JAVA任务）</li>\n</ol>\n</blockquote>\n<p><em>作业任务为Java任务的实例如下</em></p>\n<ul>\n<li><p>EAST流程开启任务（POST请求）<br>  ```ruby<br>类名：com.fitechsoft.util.HttpRequest<br>方法名：sendPost<br>URL：<a href=\"http://IP:端口/项目名/task/startProcess/\" target=\"_blank\" rel=\"noopener\">http://IP:端口/项目名/task/startProcess/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- EAST上报报文生成任务（GET请求）  </span><br><span class=\"line\">```ruby</span><br><span class=\"line\">类名：com.fitechsoft.util.HttpRequest</span><br><span class=\"line\">方法名：sendGet</span><br><span class=\"line\">URL：http://IP:端口/项目名/ledgerReportFile/reportFileGenerated/create</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据补录系统流程开启任务（POST请求）</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名：com.fitechsoft.util.HttpRequest</span><br><span class=\"line\">方法名：sendPost</span><br><span class=\"line\"><span class=\"symbol\">URL:</span><span class=\"symbol\">http:</span>/<span class=\"regexp\">/IP:端口/</span>项目名/accountTask/startProcess/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入‘作业管理’ 将任务管理中创建的任务配置到作业中</p>\n</li>\n<li>选择你要维护的作业，点击作业维护<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/151904_7d519dcc_1102706.png\" alt=\"输入图片说明\" title=\"15.png\"></li>\n</ul>\n<ol>\n<li>添加新步骤，将任务配置到作业管理中<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/151948_2459f713_1102706.png\" alt=\"输入图片说明\" title=\"16.png\"></li>\n</ol>\n<h4 id=\"部署ETL调度任务\"><a href=\"#部署ETL调度任务\" class=\"headerlink\" title=\"部署ETL调度任务\"></a>部署ETL调度任务</h4><ul>\n<li>将fitech-etl-1.0.war放入应用服务器中间件中</li>\n<li>修改ETL系统配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/153251_aa9e251f_1102706.png\" alt=\"输入图片说明\" title=\"17.png\"></li>\n<li>config.properties 修改ETL调度任务配置数据库<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/155627_3d96691e_1102706.png\" alt=\"输入图片说明\" title=\"18.png\"></li>\n<li>config1.properties 修改ETL调度任务存储过程数据表配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/155636_08b12be3_1102706.png\" alt=\"输入图片说明\" title=\"19.png\"></li>\n<li>启动服务，控制台正常启动即可，操作员登录系统，查看代办任务是否有数据，有数据即可<h1 id=\"Home\"><a href=\"#Home\" class=\"headerlink\" title=\"Home\"></a>Home</h1></li>\n</ul>\n<ol>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0activiti%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E&amp;parent=\" target=\"_blank\" rel=\"noopener\">新平台activiti参数说明</a></li>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/wikis/pages?title=git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&amp;parent=\" target=\"_blank\" rel=\"noopener\">git安装教程</a></li>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C&amp;parent=\" target=\"_blank\" rel=\"noopener\">新平台开发手册</a><h1 id=\"git安装教程\"><a href=\"#git安装教程\" class=\"headerlink\" title=\"git安装教程\"></a>git安装教程</h1><h3 id=\"安装介质\"><a href=\"#安装介质\" class=\"headerlink\" title=\"安装介质\"></a>安装介质</h3></li>\n</ol>\n<ul>\n<li>Git-1.9.5-preview20150319.exe</li>\n<li>TortoiseGit-1.8.14.0-64bit.msi</li>\n<li>Tor4toiseGit-LanguagePack-1.8.14.0-64bit-zh_CN.msi<br>  <a href=\"http://gitee.com/mpmpal_cr/document/attach_files/download?i=102945&amp;u=http://files.git.oschina.net/group1/M00/02/3F/PaAvDFn_1fiAEkFDAocAFD5NBjw242.rar?token=3d3e93341027b8450a17c0d4f33afc20&amp;ts=1509938681&amp;attname=Git%2CTortoiseGit%E5%AE%89%E8%A3%85.rar\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n</ul>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><ol>\n<li>配置SSH密钥<br><img src=\"https://git.oschina.net/uploads/images/2017/0830/143511_7e9c1265_1102706.png\" alt=\"配置SSH密钥\" title=\"clipboard.png\"></li>\n<li>找到生成的git授权KEY,路径默认生成在 <em>C:\\Users\\rui.ssh</em><br><img src=\"https://git.oschina.net/uploads/images/2017/0830/143750_9390d834_1102706.png\" alt=\"git授权KEY\" title=\"clipboard.png\"></li>\n<li>配置TortoiseGit<br><img src=\"https://git.oschina.net/uploads/images/2017/0830/143856_de604f92_1102706.png\" alt=\"输入图片说明\" title=\"clipboard.png\"><br><img src=\"https://git.oschina.net/uploads/images/2017/0830/144125_814b18db_1102706.png\" alt=\"输入图片说明\" title=\"clipboard.png\"><br><img src=\"https://git.oschina.net/uploads/images/2017/0830/144156_8ca52887_1102706.png\" alt=\"输入图片说明\" title=\"clipboard.png\"></li>\n</ol>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><ul>\n<li><p>查看当前git仓库获取和提交服务地址</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建并切换</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看工作区修改文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看修改内容</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加修改到缓存区</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add ***</span><br><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本提交</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"branch test\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并分支dev到当前分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定定远程版本更新到本地指定版本</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;<span class=\"symbol\">:&lt;</span>本地分支名&gt;</span><br><span class=\"line\">git pull origin <span class=\"symbol\">dev:</span>master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将当前分支提交到远程分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;远程主机名&gt; &lt;远程分支名&gt;</span><br><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换git地址</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. git remote rm origin</span><br><span class=\"line\"><span class=\"number\">2</span>. git remote add origin git@github.<span class=\"symbol\">com:</span>yuquan0821/demo.git</span><br><span class=\"line\"><span class=\"number\">3</span>. git push origin</span><br></pre></td></tr></table></figure>\n<p><strong>GIT教程</strong> </p>\n</li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">网络教程</a></li>\n</ul>\n<h1 id=\"oracle数据导出工具sqluldr2配置\"><a href=\"#oracle数据导出工具sqluldr2配置\" class=\"headerlink\" title=\"oracle数据导出工具sqluldr2配置\"></a>oracle数据导出工具sqluldr2配置</h1><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>由于sqluldr2是基于oracle客户端的一个插件，则需要在平台服务端安装oracle_client</li>\n<li>下载sqluldr2.bin（根据操作系统自行判定版本）到$ORACLE_HOME的bin目录，重命名为sqluldr2.bin</li>\n<li><p>修改oracle安装$HOME目录下.bash_profile 增加如下环境变量</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH=$ORACLE_HOME/<span class=\"symbol\">bin:</span>$ORACLE_HOME/<span class=\"symbol\">lib:</span>/<span class=\"symbol\">lib:</span>/usr/lib</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行 sqluldr2.bin 执行成功即可</p>\n<h1 id=\"新平台activiti参数说明\"><a href=\"#新平台activiti参数说明\" class=\"headerlink\" title=\"新平台activiti参数说明\"></a>新平台activiti参数说明</h1><h3 id=\"activiti配置\"><a href=\"#activiti配置\" class=\"headerlink\" title=\"activiti配置\"></a>activiti配置</h3></li>\n<li>新建bpmn流程</li>\n<li>绘制流程图，具体画法网上有</li>\n<li>设置流程参数<ul>\n<li>配置流程图ID ; name ; namespaces属性（自定义）;<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141007_8649cc82_1102706.png\" alt=\"输入图片说明\" title=\"1.png\"></li>\n<li>配置启动监听（该监听为自定义，平台已经初始化一个，无特殊需求可直接使用）<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141102_62ed4ba4_1102706.png\" alt=\"输入图片说明\" title=\"2.png\"></li>\n<li>配置任务节点属性<ol>\n<li>配置ID和name(此ID有特殊用处)<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141225_c541dcca_1102706.png\" alt=\"输入图片说明\" title=\"3.png\"></li>\n<li>配置指派角色和督办角色，<ul>\n<li>变量规则：${任务节点ID_assignee};${任务节点ID_supervise}<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141253_9b67ac6b_1102706.png\" alt=\"输入图片说明\" title=\"4.png\"></li>\n</ul>\n</li>\n<li>设置任务节点参数<ul>\n<li>argname: 路由KEY，固定为input</li>\n<li>argvalues: 页面按钮参数，几个路由跳转几个参数，可自定义</li>\n<li>handleEntry 当前任务节点页面路由地址</li>\n<li>completeEntry 暂时为空，预留</li>\n<li>isAssign:是否支持任务转派， ${任务节点ID_isAssign}<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141342_3d544a50_1102706.png\" alt=\"输入图片说明\" title=\"5.png\"></li>\n</ul>\n</li>\n<li>路由扭转控制参数<ul>\n<li>设定页面跳转路由参数${input==’refuse’}</li>\n<li>说明 input:为步骤三中argname 的参数，无明显需求暂统一定义为input</li>\n<li>说明’refuse’ 为步骤三中argvalues参数中定义的value，指定下一节点跳转<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141411_478f2512_1102706.png\" alt=\"输入图片说明\" title=\"6.png\"><h1 id=\"新平台开发手册\"><a href=\"#新平台开发手册\" class=\"headerlink\" title=\"新平台开发手册\"></a>新平台开发手册</h1><h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>开发工具IDE：IntelliJ IDEA/Eclipse</li>\n<li>数据库：mysql/oracle</li>\n<li>JDK:1.8</li>\n<li>版本管理工具：GIT</li>\n<li>项目管理工具：MAVEN</li>\n</ul>\n<h3 id=\"开发规范\"><a href=\"#开发规范\" class=\"headerlink\" title=\"开发规范\"></a>开发规范</h3><ul>\n<li>项目包名:com.fitech.功能名.项目名</li>\n<li><p>项目类名:</p>\n<ul>\n<li>领域模型：根据领域模型实际意义创建（能用英文标识的必须使用英文，无法使用英文标识的用拼音首字母创建类名，首字母必须大写)</li>\n<li>持久化层：领域模型名+Repository</li>\n<li>业务层：<ol>\n<li>接口：领域模型名+Service</li>\n<li>实现：领域模型名+ServiceImpl</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>注释:</p>\n</li>\n<li>类名注释：当前类的中文描述+作者<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152051_747dcf5e_1102706.png\" alt=\"类名注释\" title=\"图片1.png\"></li>\n<li>接口名注释：当前接口作用+入参说明+出参说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152154_1cf6e0b1_1102706.png\" alt=\"接口注释\" title=\"图片2.png\"></li>\n<li>业务代码注释：每10行必须有至少有一个注释，业务复杂的3行内要有注释，判断条件（if）必须有注释</li>\n<li>预留接口，预留逻辑必须使用//TODO进行标记，并且加上备</li>\n<li><p>如果修改业务逻辑代码，在修改处添加备注，标识修改原因，修改时间和修改人<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152322_a4b7aeb4_1102706.png\" alt=\"修改说明\" title=\"图片3.png\"></p>\n</li>\n<li><p>测试用例</p>\n</li>\n<li>每个模块有独立的测试用例配置文件，放置位置在<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152917_14e372ff_1102706.png\" alt=\"测试用例配置文件\" title=\"QQ截图20170830152553.png\"></li>\n<li><p>每个业务逻辑添加单元测试，测试通过再提交代码<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152948_01102b7d_1102706.png\" alt=\"测试用例\" title=\"图片4.png\"></p>\n</li>\n<li><p>GIT代码管理</p>\n</li>\n<li>仓库中默认版本master，是我们开发版本</li>\n<li>本地更新后，创建本地开发版本dev   (git checkout -b dev)</li>\n<li>本地开发完成并测试通过后提交本地仓库</li>\n<li>切换版本到master （git checkout master）</li>\n<li>更新最新的开发版本</li>\n<li>合并DEV版本到master （git merge dev）</li>\n<li>确定无冲突之后提交远程仓库</li>\n</ul>\n<h3 id=\"技术说明\"><a href=\"#技术说明\" class=\"headerlink\" title=\"技术说明\"></a>技术说明</h3><ul>\n<li>domain说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/154423_a15e4a4c_1102706.png\" alt=\"domain\" title=\"图片5.png\"></li>\n<li>添加注释@entity</li>\n<li>主体继承FBSubject,客体继承FBObject</li>\n<li>每个字段属性添加@Description(“角色名称”)注解，方便后期功能扩充</li>\n<li>service说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/160045_4a882daf_1102706.png\" alt=\"service\" title=\"图片6.png\"></li>\n<li>添加@Service注解，加入spring容器管理</li>\n<li>添加@ServiceTrace注解，系统会自动管理service接口日志，记录到logback<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/160703_aa9ffc2f_1102706.png\" alt=\"输入图片说明\" title=\"图片7.png\"></li>\n<li>接口的增删改操作需要捕获reporsitory发生的异常，然后throw出appException异常，这个是自定义异常，统一处理系统异常，记录logback,可自定义入参，第一个是异常码，可自定义，第二个是系统异常，可自定义;</li>\n<li>对于一个服务接口有2个及以上“增”“删”“改”操作的，需要添加事务@Transactional</li>\n<li>controller说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/162413_b14e447d_1102706.png\" alt=\"controller\" title=\"图片8.png\"></li>\n<li>添加控制层上添加@RequestMapping ，定位当前接口位置，便于后期权限控制<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/163109_0c571fe1_1102706.png\" alt=\"输入图片说明\" title=\"图片9.png\"></li>\n<li>controller回调GenericResult\\&lt;?>封装回调函数，里面有当前请求是否成功，成功状态，异常状态，异常码，数据集对象等，系统回封装成json返回前端;</li>\n<li>controller中需要记录用户的操作日志，可以只对增删改操作记录，查询根据具体情况记录，addOperateLog第一个为日志信息，自定义，第二个是请求上下文对象，系统需要根据请求上下文获取登录用户信息和IP等;</li>\n<li>操作日志需要在finally中记录，防止系统异常没有记录;</li>\n<li>war 说明<br><img src=\"https://git.oschina.net/uploads/images/2017/0830/163455_5036a5e5_1102706.png\" alt=\"war \" title=\"图片10.png\"></li>\n</ul>\n<ol>\n<li>Activiti.cfg.xml：activiti流程引擎配置</li>\n<li>applicationContext-jpa.xml：配置持久化层springdata配置</li>\n<li>applicationContext.xml：spring相关配置</li>\n<li>Security.cfg.xml：权限框架springsecutity相关配置</li>\n<li>secutityAcl.cfg.xml：数据权限acl相关配置</li>\n<li>Spring-mvc.xml</li>\n<li>Springbatch-content</li>\n<li>Application-evn.properties:数据源配置及其他的一些参数配置</li>\n<li>Logback.xml：配置系统日志，<blockquote>\n<p>注：可根据具体需求进行配置修改</p>\n<h3 id=\"开发注意事项\"><a href=\"#开发注意事项\" class=\"headerlink\" title=\"开发注意事项\"></a>开发注意事项</h3></blockquote>\n</li>\n<li>clean install -Dmaven.test.skip=true 模块编译</li>\n<li>jetty:run 项目执行<h3 id=\"数据库版本切换\"><a href=\"#数据库版本切换\" class=\"headerlink\" title=\"数据库版本切换\"></a>数据库版本切换</h3></li>\n</ol>\n<ul>\n<li>目前系统支持mysql和Oracle数据库，由于制度报文生成接口是由不同数据库语法编写所以在切换数据库的同时要修改对应的数据库方言配置</li>\n<li>修改pom.xml<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/164510_7b159611_1102706.png\" alt=\"输入图片说明\" title=\"图片11.png\"><br><strong>目前0.0.1-SNAPSHOT版本对应mysql;0.0.2-SNAPSHOT版本对应oracle</strong></li>\n</ul>\n<ol>\n<li>修改配置文件applicationContext-jpa.xml，改为数据库所对应的接口实现类<br> <img src=\"https://git.oschina.net/uploads/images/2017/0830/164601_eb23eff4_1102706.png\" alt=\"输入图片说明\" title=\"图片12.png\"></li>\n<li>如果需要新加SQL实现函数，则在对应的系统模块中添加，例如<br> <img src=\"https://git.oschina.net/uploads/images/2017/0830/164642_efb5c1a0_1102706.png\" alt=\"输入图片说明\" title=\"图片13.png\"><br> 实现自己的业务逻辑即可，然后在applicationContext-jpa.xml添加相应配置加入spring管理容器</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"EAST项目部署常见问题\"><a href=\"#EAST项目部署常见问题\" class=\"headerlink\" title=\"EAST项目部署常见问题\"></a>EAST项目部署常见问题</h1><h2 id=\"项目启动报错\"><a href=\"#项目启动报错\" class=\"headerlink\" title=\"项目启动报错\"></a>项目启动报错</h2><ol>\n<li>保证服务器jdk版本为1.8以上</li>\n<li>首次部署仅将fitech.war,platform.war和libs.war放入服务器中间件中，防止日志太多，异常不容易排查</li>\n<li>查看服务器日志，发现connection异常，检查fitech中的数据库配置是否正确</li>\n</ol>\n<h2 id=\"用户登录异常\"><a href=\"#用户登录异常\" class=\"headerlink\" title=\"用户登录异常\"></a>用户登录异常</h2><ol>\n<li>检查数据脚本都正常执行了，可查看select * from sysuser是否有数据</li>\n<li>访问浏览器控制台，F12，登录一下看看是否有异常，如果是404，检查platform中的fitech.js是否修改成功</li>\n</ol>\n<h2 id=\"登录之后系统常见问题\"><a href=\"#登录之后系统常见问题\" class=\"headerlink\" title=\"登录之后系统常见问题\"></a>登录之后系统常见问题</h2><ol>\n<li>不要随意直接在数据库中修改数据，会导致页面显示有问题，如果实在想操作，请先询问产品开发</li>\n<li>系统配置中的制度配置导入时间比较久，耐心等待一会，重复导入可能会导致数据问题，查看是否成功，可在报文配置中查看数据表<br>\\3. </li>\n</ol>\n<h2 id=\"ETL数据调度常见问题\"><a href=\"#ETL数据调度常见问题\" class=\"headerlink\" title=\"ETL数据调度常见问题\"></a>ETL数据调度常见问题</h2><blockquote>\n<p>新平台EAST需要配置3个作业才可以正常运行  </p>\n<ul>\n<li>数据补录作业</li>\n</ul>\n<ol>\n<li>数据补录系统待上报报文流程存储过程（east.create_bl_task|系统内置）</li>\n<li>数据补录系统流程开启任务（JAVA任务）</li>\n<li>EAST收据调度作业</li>\n<li>EAST待上报报文流程存储过程（east.proc_ledgerReport|系统内置）  </li>\n<li>数据拉取存储过程（客户现场人员编写）  </li>\n<li>EAST流程开启任务（JAVA任务）</li>\n<li>EAST报文生成作业</li>\n<li>EAST上报报文生成任务（JAVA任务）</li>\n</ol>\n</blockquote>\n<ol>\n<li>安装部署手册中的案例都是范例，请根据实际情况进行配置</li>\n<li>调度任务有没有成功执行，可以查看控制台日志是否执行成功</li>\n<li>数据库连接异常，可查看fitech-etl-1.0.war是否配置成功</li>\n<li>出现数组越界，可能是作业中的任务配置有问题，可截图发给开发排查问题</li>\n<li>ETL会根据配置频度来控制执行状态，例如日频度，则当天只能执行一次，如果想多次执行，则到数据调度监控中重新执行作业，或者执行SQL手动删除ETL调度任务 例如：</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from etl_job_monitor;</span><br><span class=\"line\">select * from ETL_TASK_MONITOR;</span><br><span class=\"line\"></span><br><span class=\"line\">delete from ETL_JOB_MONITOR where yxrq = <span class=\"string\">'20171020'</span>;</span><br><span class=\"line\">delete from ETL_TASK_MONITOR where yxrq = <span class=\"string\">'20171020'</span>;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<h1 id=\"EAST项目部署手册\"><a href=\"#EAST项目部署手册\" class=\"headerlink\" title=\"EAST项目部署手册\"></a>EAST项目部署手册</h1><h2 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h2><ul>\n<li>数据库（如果是oracle需要安装oracle客户端，用作sqluldr2报文生成）</li>\n<li>jdk1.8以上</li>\n<li>服务器中间件（需要支持jdk1.8）</li>\n</ul>\n<h2 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h2><blockquote>\n<p>项目分成4个子服务，由于模块之间有相互调用，需要分先后启动，分别配置</p>\n</blockquote>\n<ul>\n<li>fitech.war<br><em>平台主服务,处理平台业务逻辑</em></li>\n<li>fitech-etl-1.0.war<br><em>ETL调度系统服务，处理数据抽取等调度任务</em></li>\n<li>platform.war<br><em>前端主服务</em></li>\n<li>libs.war<br><em>前端框架lib包</em></li>\n</ul>\n<h2 id=\"项目部署\"><a href=\"#项目部署\" class=\"headerlink\" title=\"项目部署\"></a>项目部署</h2><h4 id=\"主服务部署配置\"><a href=\"#主服务部署配置\" class=\"headerlink\" title=\"主服务部署配置\"></a>主服务部署配置</h4><ul>\n<li>将fitech.war放入服务中间件</li>\n<li>修改服务配置文件application-env.properties<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/142804_a619079d_1102706.png\" alt=\"配置文件所在位置\" title=\"图片1.png\"></li>\n<li>需要修改的配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/142905_7ad5bb2f_1102706.png\" alt=\"输入图片说明\" title=\"图片2.png\"> </li>\n</ul>\n<ol>\n<li>数据库配置，修改对应IP,端口和监听，以及用户名和密码</li>\n<li>initPassword是系统创建用户初始化密码的默认密码，根据需求修改</li>\n<li>template_path是系统模板存放路径，用于机构，用户等功能的模板下载</li>\n<li>ledgerRptFIle_tempPath和ledgerRptFIle_path是EAST生成报文存放的路径和临时文件生成的存放路径</li>\n<li>DBurl是sqluldr2报文生成数据链接配置</li>\n</ol>\n<h4 id=\"客户端部署配置\"><a href=\"#客户端部署配置\" class=\"headerlink\" title=\"客户端部署配置\"></a>客户端部署配置</h4><ul>\n<li>将platform.war和libs.war放入服务中间件</li>\n<li>修改配置文件fitech.js<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/145015_b3e45198_1102706.png\" alt=\"放置路径\" title=\"图片3.png\"><br><img src=\"https://git.oschina.net/uploads/images/2017/0922/145035_e6b445d0_1102706.png\" alt=\"输入图片说明\" title=\"图片4.png\"></li>\n</ul>\n<ol>\n<li>pathcs是配置ETL调度系统地址</li>\n<li>path是配置主服务地址(包括服务项目名)</li>\n</ol>\n<h4 id=\"创建数据库表\"><a href=\"#创建数据库表\" class=\"headerlink\" title=\"创建数据库表\"></a>创建数据库表</h4><ul>\n<li><em>启动服务，主服务会自动创建系统表</em> </li>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/attach_files/download?i=96428&amp;u=http://files.git.oschina.net/group1/M00/01/F4/PaAvDFnExYiAZBwYAAbJgGShKGQ898.rar?token=2fc273a040d2eabf77c760f50eff721b&amp;ts=1506067947&amp;attname=%E6%96%B0%E5%B9%B3%E5%8F%B0%E8%84%9A%E6%9C%AC.rar\" target=\"_blank\" rel=\"noopener\">下载脚本</a></li>\n<li>执行初始化数据  </li>\n<li>EAST3.0初始化脚本.sql（初始化条线，角色等基础信息）</li>\n<li>EAST脱敏函数.sql（初始化脱敏函数，复制该脚本中的函数依次执行）  </li>\n<li>EAST脱敏公式.sql（初始化脱敏公式）</li>\n<li>拉链表存储过程.sql（初始化拉链表存储过程，复制该脚本中的存储过程依次执行）</li>\n<li>ETL初始化脚本.sql（初始化ETL基础数据）</li>\n<li>ETL存储过程.sql（ETL存储过程）</li>\n<li>ETD指标建表语句.sql（根据需求执行，免费的10个指标）</li>\n<li>ETD初始化数据.sql（根据需求执行，免费的10个指标）</li>\n<li>数据补录系统存储过程.sql（数据补录系统存储过程）</li>\n<li>数据补录初始化脚本.sql（数据补录系统初始化脚本）</li>\n<li>初始化EAST3.0校验公式（validata_rule05.sql脚本中有N个变量，根据提示进行输入。输入&amp;&amp;+变量,如：&amp;&amp;CHANGE）</li>\n<li>将template文件夹下的excel放到application-env.properties配置文件下的template_path路径下，用于模板下载</li>\n</ul>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><ul>\n<li>启动服务器中间件</li>\n<li>打开浏览器访问<a href=\"http://IP:port/platform\" target=\"_blank\" rel=\"noopener\">http://IP:port/platform</a></li>\n<li>访问成功，点击登录使用superadmin登录，密码123456进行登录</li>\n</ul>\n<h4 id=\"配置业务制度\"><a href=\"#配置业务制度\" class=\"headerlink\" title=\"配置业务制度\"></a>配置业务制度</h4><ul>\n<li>进入系统配置》制度管理<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173322_c8830ec5_1102706.png\" alt=\"输入图片说明\" title=\"5.png\"></li>\n<li>进入银监标准化业务条线》手工配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173652_6afc04b1_1102706.png\" alt=\"输入图片说明\" title=\"6.png\"></li>\n<li>新增一个制度<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173722_7a2ae350_1102706.png\" alt=\"输入图片说明\" title=\"7.png\"></li>\n<li>点击批量载入，选择系统导入文件夹下的EASTtemplate0530.xlsx和fields.xlsx，点击确定，待导入完成后，可生成EAST的58张数据表<br><img src=\"https://git.oschina.net/uploads/images/2017/0922/173755_dfcbb075_1102706.png\" alt=\"输入图片说明\" title=\"8.png\"></li>\n<li>进入报文配置功能，查看报文是否生成成功，如果成功可进入操作手册进行机构，用户，角色等业务配置</li>\n</ul>\n<h4 id=\"数据配置\"><a href=\"#数据配置\" class=\"headerlink\" title=\"数据配置\"></a>数据配置</h4><ul>\n<li>系统需要现场实施人员根据客户现场情况创建机构，角色和用户信息</li>\n<li>机构信息配置</li>\n<li>角色信息配置</li>\n<li>用户信息配置</li>\n<li>流程信息配置（重要，ETL数据调度流程需要此步骤）<br>   <a href=\"https://gitee.com/mpmpal_cr/document/attach_files/download?i=98255&amp;u=http://files.git.oschina.net/group1/M00/02/09/PaAvDFnbQGuALm5OAGF7R5HNSdg735.doc?token=a118c827b961e80c623f752ed78eb4d8&amp;ts=1507541099&amp;attname=PD-%E7%A7%91%E8%9E%8D%E7%BB%BC%E5%90%88%E7%BB%9F%E8%AE%A1%E5%B9%B3%E5%8F%B0%E4%BA%A7%E5%93%81-%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C_V1.0_20170928.doc\" target=\"_blank\" rel=\"noopener\">详见用户操作手册</a></li>\n</ul>\n<h4 id=\"配置ETL调度任务\"><a href=\"#配置ETL调度任务\" class=\"headerlink\" title=\"配置ETL调度任务\"></a>配置ETL调度任务</h4><ul>\n<li>进入业务条线 》 数据调度<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/095221_0b8c5fd0_1102706.png\" alt=\"数据调度\" title=\"9.png\"></li>\n<li>进入‘作业分类’菜单，新建一个‘作业分类’，用于管理系统调度作业</li>\n<li>进入‘作业管理’菜单，在新建的作业分类下创建调度作业，用于数据调度；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/100741_ab5c641f_1102706.png\" alt=\"输入图片说明\" title=\"10.png\"></li>\n</ul>\n<ol>\n<li>新增作业；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/101135_d4af3a5b_1102706.png\" alt=\"输入图片说明\" title=\"11.png\"><blockquote>\n<p>选择当前调度作业 <em>目前仅支持shell脚本和存储过程</em><br>配置作业频度之后，只有满足当前配置的启动条件，调度作业才会启动 <em>shell和存储过程必须要有回调true/false</em>  </p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>进入‘任务管理’菜单，用于配置调度作业所需要的任务；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/113253_f27a4429_1102706.png\" alt=\"输入图片说明\" title=\"12.png\">  </li>\n<li>选择任务类型新建任务<br>1.新建procedure存储过程任务；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/142839_6cf3572f_1102706.png\" alt=\"输入图片说明\" title=\"13.png\"><br><em>所有的存储过程必须要有回调函数true/false;例如：</em></li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create <span class=\"keyword\">or</span> replace procedure testproc(term <span class=\"keyword\">in</span> VARCHAR2, result OUT varchar)</span><br><span class=\"line\">as</span><br><span class=\"line\">  CURSOR c1 IS</span><br><span class=\"line\">select l.id, t.tablename, i.institutionid</span><br><span class=\"line\">      from ledgerreport l</span><br><span class=\"line\">      left join ledgerrpttemplate t</span><br><span class=\"line\">        on l.ledgerreporttemplate_id = t.id</span><br><span class=\"line\">      left join institution i</span><br><span class=\"line\">        on l.institution_id = i.id</span><br><span class=\"line\">     where l.submitstatetype = <span class=\"string\">'2'</span></span><br><span class=\"line\">       <span class=\"keyword\">and</span> l.term = term</span><br><span class=\"line\">       <span class=\"keyword\">and</span>  i.institutionid=<span class=\"string\">'3011'</span>;</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">FOR acct IN c1 LOOP</span><br><span class=\"line\">   update test.t_gx_ygb set reportid = acct.id</span><br><span class=\"line\"></span><br><span class=\"line\"> where nbjgh = <span class=\"string\">'3011'</span>;</span><br><span class=\"line\">  insert into yjbzh.t_gx_ygb</span><br><span class=\"line\">    select SEQ_FITECH.nextval id,REPORTID,CJRQ,GWBH,YGZT,YXJGMC,ZW,YXJGDM,SFZH,XM,JRXKZH,SSBM,WDH,LXDH,GH,NBJGH,SYNCABLE from test.t_gx_ygb;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\">  commit;</span><br><span class=\"line\">  result <span class=\"symbol\">:</span>= <span class=\"string\">'true'</span>;</span><br><span class=\"line\">exception</span><br><span class=\"line\">  <span class=\"keyword\">when</span> storage_error <span class=\"keyword\">then</span></span><br><span class=\"line\">    result <span class=\"symbol\">:</span>= <span class=\"string\">'false'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">when</span> others <span class=\"keyword\">then</span></span><br><span class=\"line\">    result <span class=\"symbol\">:</span>= <span class=\"string\">'false'</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> testproc;</span><br></pre></td></tr></table></figure>\n<p>2.新加java调度任务；例如：<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/144829_27d05efd_1102706.png\" alt=\"输入图片说明\" title=\"14.png\"></p>\n<blockquote>\n<p>新平台EAST需要配置3个作业才可以正常运行  </p>\n<ul>\n<li>数据补录作业</li>\n</ul>\n<ol>\n<li>数据补录系统待上报报文流程存储过程（east.create_bl_task|系统内置）</li>\n<li>数据补录系统流程开启任务（JAVA任务）</li>\n<li>EAST收据调度作业</li>\n<li>EAST待上报报文流程存储过程（east.proc_ledgerReport|系统内置）  </li>\n<li>数据拉取存储过程（客户现场人员编写）  </li>\n<li>EAST流程开启任务（JAVA任务）</li>\n<li>EAST报文生成作业</li>\n<li>EAST上报报文生成任务（JAVA任务）</li>\n</ol>\n</blockquote>\n<p><em>作业任务为Java任务的实例如下</em></p>\n<ul>\n<li><p>EAST流程开启任务（POST请求）<br>  ```ruby<br>类名：com.fitechsoft.util.HttpRequest<br>方法名：sendPost<br>URL：<a href=\"http://IP:端口/项目名/task/startProcess/\" target=\"_blank\" rel=\"noopener\">http://IP:端口/项目名/task/startProcess/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- EAST上报报文生成任务（GET请求）  </span><br><span class=\"line\">```ruby</span><br><span class=\"line\">类名：com.fitechsoft.util.HttpRequest</span><br><span class=\"line\">方法名：sendGet</span><br><span class=\"line\">URL：http://IP:端口/项目名/ledgerReportFile/reportFileGenerated/create</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据补录系统流程开启任务（POST请求）</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名：com.fitechsoft.util.HttpRequest</span><br><span class=\"line\">方法名：sendPost</span><br><span class=\"line\"><span class=\"symbol\">URL:</span><span class=\"symbol\">http:</span>/<span class=\"regexp\">/IP:端口/</span>项目名/accountTask/startProcess/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入‘作业管理’ 将任务管理中创建的任务配置到作业中</p>\n</li>\n<li>选择你要维护的作业，点击作业维护<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/151904_7d519dcc_1102706.png\" alt=\"输入图片说明\" title=\"15.png\"></li>\n</ul>\n<ol>\n<li>添加新步骤，将任务配置到作业管理中<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/151948_2459f713_1102706.png\" alt=\"输入图片说明\" title=\"16.png\"></li>\n</ol>\n<h4 id=\"部署ETL调度任务\"><a href=\"#部署ETL调度任务\" class=\"headerlink\" title=\"部署ETL调度任务\"></a>部署ETL调度任务</h4><ul>\n<li>将fitech-etl-1.0.war放入应用服务器中间件中</li>\n<li>修改ETL系统配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/153251_aa9e251f_1102706.png\" alt=\"输入图片说明\" title=\"17.png\"></li>\n<li>config.properties 修改ETL调度任务配置数据库<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/155627_3d96691e_1102706.png\" alt=\"输入图片说明\" title=\"18.png\"></li>\n<li>config1.properties 修改ETL调度任务存储过程数据表配置<br><img src=\"https://git.oschina.net/uploads/images/2017/0925/155636_08b12be3_1102706.png\" alt=\"输入图片说明\" title=\"19.png\"></li>\n<li>启动服务，控制台正常启动即可，操作员登录系统，查看代办任务是否有数据，有数据即可<h1 id=\"Home\"><a href=\"#Home\" class=\"headerlink\" title=\"Home\"></a>Home</h1></li>\n</ul>\n<ol>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0activiti%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E&amp;parent=\" target=\"_blank\" rel=\"noopener\">新平台activiti参数说明</a></li>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/wikis/pages?title=git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&amp;parent=\" target=\"_blank\" rel=\"noopener\">git安装教程</a></li>\n<li><a href=\"https://gitee.com/mpmpal_cr/document/wikis/pages?title=%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C&amp;parent=\" target=\"_blank\" rel=\"noopener\">新平台开发手册</a><h1 id=\"git安装教程\"><a href=\"#git安装教程\" class=\"headerlink\" title=\"git安装教程\"></a>git安装教程</h1><h3 id=\"安装介质\"><a href=\"#安装介质\" class=\"headerlink\" title=\"安装介质\"></a>安装介质</h3></li>\n</ol>\n<ul>\n<li>Git-1.9.5-preview20150319.exe</li>\n<li>TortoiseGit-1.8.14.0-64bit.msi</li>\n<li>Tor4toiseGit-LanguagePack-1.8.14.0-64bit-zh_CN.msi<br>  <a href=\"http://gitee.com/mpmpal_cr/document/attach_files/download?i=102945&amp;u=http://files.git.oschina.net/group1/M00/02/3F/PaAvDFn_1fiAEkFDAocAFD5NBjw242.rar?token=3d3e93341027b8450a17c0d4f33afc20&amp;ts=1509938681&amp;attname=Git%2CTortoiseGit%E5%AE%89%E8%A3%85.rar\" target=\"_blank\" rel=\"noopener\">下载</a></li>\n</ul>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><ol>\n<li>配置SSH密钥<br><img src=\"https://git.oschina.net/uploads/images/2017/0830/143511_7e9c1265_1102706.png\" alt=\"配置SSH密钥\" title=\"clipboard.png\"></li>\n<li>找到生成的git授权KEY,路径默认生成在 <em>C:\\Users\\rui.ssh</em><br><img src=\"https://git.oschina.net/uploads/images/2017/0830/143750_9390d834_1102706.png\" alt=\"git授权KEY\" title=\"clipboard.png\"></li>\n<li>配置TortoiseGit<br><img src=\"https://git.oschina.net/uploads/images/2017/0830/143856_de604f92_1102706.png\" alt=\"输入图片说明\" title=\"clipboard.png\"><br><img src=\"https://git.oschina.net/uploads/images/2017/0830/144125_814b18db_1102706.png\" alt=\"输入图片说明\" title=\"clipboard.png\"><br><img src=\"https://git.oschina.net/uploads/images/2017/0830/144156_8ca52887_1102706.png\" alt=\"输入图片说明\" title=\"clipboard.png\"></li>\n</ol>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><ul>\n<li><p>查看当前git仓库获取和提交服务地址</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建并切换</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看工作区修改文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看修改内容</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加修改到缓存区</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add ***</span><br><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本提交</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"branch test\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并分支dev到当前分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定定远程版本更新到本地指定版本</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;<span class=\"symbol\">:&lt;</span>本地分支名&gt;</span><br><span class=\"line\">git pull origin <span class=\"symbol\">dev:</span>master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将当前分支提交到远程分支</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;远程主机名&gt; &lt;远程分支名&gt;</span><br><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换git地址</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. git remote rm origin</span><br><span class=\"line\"><span class=\"number\">2</span>. git remote add origin git@github.<span class=\"symbol\">com:</span>yuquan0821/demo.git</span><br><span class=\"line\"><span class=\"number\">3</span>. git push origin</span><br></pre></td></tr></table></figure>\n<p><strong>GIT教程</strong> </p>\n</li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">网络教程</a></li>\n</ul>\n<h1 id=\"oracle数据导出工具sqluldr2配置\"><a href=\"#oracle数据导出工具sqluldr2配置\" class=\"headerlink\" title=\"oracle数据导出工具sqluldr2配置\"></a>oracle数据导出工具sqluldr2配置</h1><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>由于sqluldr2是基于oracle客户端的一个插件，则需要在平台服务端安装oracle_client</li>\n<li>下载sqluldr2.bin（根据操作系统自行判定版本）到$ORACLE_HOME的bin目录，重命名为sqluldr2.bin</li>\n<li><p>修改oracle安装$HOME目录下.bash_profile 增加如下环境变量</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH=$ORACLE_HOME/<span class=\"symbol\">bin:</span>$ORACLE_HOME/<span class=\"symbol\">lib:</span>/<span class=\"symbol\">lib:</span>/usr/lib</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行 sqluldr2.bin 执行成功即可</p>\n<h1 id=\"新平台activiti参数说明\"><a href=\"#新平台activiti参数说明\" class=\"headerlink\" title=\"新平台activiti参数说明\"></a>新平台activiti参数说明</h1><h3 id=\"activiti配置\"><a href=\"#activiti配置\" class=\"headerlink\" title=\"activiti配置\"></a>activiti配置</h3></li>\n<li>新建bpmn流程</li>\n<li>绘制流程图，具体画法网上有</li>\n<li>设置流程参数<ul>\n<li>配置流程图ID ; name ; namespaces属性（自定义）;<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141007_8649cc82_1102706.png\" alt=\"输入图片说明\" title=\"1.png\"></li>\n<li>配置启动监听（该监听为自定义，平台已经初始化一个，无特殊需求可直接使用）<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141102_62ed4ba4_1102706.png\" alt=\"输入图片说明\" title=\"2.png\"></li>\n<li>配置任务节点属性<ol>\n<li>配置ID和name(此ID有特殊用处)<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141225_c541dcca_1102706.png\" alt=\"输入图片说明\" title=\"3.png\"></li>\n<li>配置指派角色和督办角色，<ul>\n<li>变量规则：${任务节点ID_assignee};${任务节点ID_supervise}<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141253_9b67ac6b_1102706.png\" alt=\"输入图片说明\" title=\"4.png\"></li>\n</ul>\n</li>\n<li>设置任务节点参数<ul>\n<li>argname: 路由KEY，固定为input</li>\n<li>argvalues: 页面按钮参数，几个路由跳转几个参数，可自定义</li>\n<li>handleEntry 当前任务节点页面路由地址</li>\n<li>completeEntry 暂时为空，预留</li>\n<li>isAssign:是否支持任务转派， ${任务节点ID_isAssign}<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141342_3d544a50_1102706.png\" alt=\"输入图片说明\" title=\"5.png\"></li>\n</ul>\n</li>\n<li>路由扭转控制参数<ul>\n<li>设定页面跳转路由参数${input==’refuse’}</li>\n<li>说明 input:为步骤三中argname 的参数，无明显需求暂统一定义为input</li>\n<li>说明’refuse’ 为步骤三中argvalues参数中定义的value，指定下一节点跳转<br><img src=\"https://git.oschina.net/uploads/images/2017/0809/141411_478f2512_1102706.png\" alt=\"输入图片说明\" title=\"6.png\"><h1 id=\"新平台开发手册\"><a href=\"#新平台开发手册\" class=\"headerlink\" title=\"新平台开发手册\"></a>新平台开发手册</h1><h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>开发工具IDE：IntelliJ IDEA/Eclipse</li>\n<li>数据库：mysql/oracle</li>\n<li>JDK:1.8</li>\n<li>版本管理工具：GIT</li>\n<li>项目管理工具：MAVEN</li>\n</ul>\n<h3 id=\"开发规范\"><a href=\"#开发规范\" class=\"headerlink\" title=\"开发规范\"></a>开发规范</h3><ul>\n<li>项目包名:com.fitech.功能名.项目名</li>\n<li><p>项目类名:</p>\n<ul>\n<li>领域模型：根据领域模型实际意义创建（能用英文标识的必须使用英文，无法使用英文标识的用拼音首字母创建类名，首字母必须大写)</li>\n<li>持久化层：领域模型名+Repository</li>\n<li>业务层：<ol>\n<li>接口：领域模型名+Service</li>\n<li>实现：领域模型名+ServiceImpl</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>注释:</p>\n</li>\n<li>类名注释：当前类的中文描述+作者<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152051_747dcf5e_1102706.png\" alt=\"类名注释\" title=\"图片1.png\"></li>\n<li>接口名注释：当前接口作用+入参说明+出参说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152154_1cf6e0b1_1102706.png\" alt=\"接口注释\" title=\"图片2.png\"></li>\n<li>业务代码注释：每10行必须有至少有一个注释，业务复杂的3行内要有注释，判断条件（if）必须有注释</li>\n<li>预留接口，预留逻辑必须使用//TODO进行标记，并且加上备</li>\n<li><p>如果修改业务逻辑代码，在修改处添加备注，标识修改原因，修改时间和修改人<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152322_a4b7aeb4_1102706.png\" alt=\"修改说明\" title=\"图片3.png\"></p>\n</li>\n<li><p>测试用例</p>\n</li>\n<li>每个模块有独立的测试用例配置文件，放置位置在<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152917_14e372ff_1102706.png\" alt=\"测试用例配置文件\" title=\"QQ截图20170830152553.png\"></li>\n<li><p>每个业务逻辑添加单元测试，测试通过再提交代码<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/152948_01102b7d_1102706.png\" alt=\"测试用例\" title=\"图片4.png\"></p>\n</li>\n<li><p>GIT代码管理</p>\n</li>\n<li>仓库中默认版本master，是我们开发版本</li>\n<li>本地更新后，创建本地开发版本dev   (git checkout -b dev)</li>\n<li>本地开发完成并测试通过后提交本地仓库</li>\n<li>切换版本到master （git checkout master）</li>\n<li>更新最新的开发版本</li>\n<li>合并DEV版本到master （git merge dev）</li>\n<li>确定无冲突之后提交远程仓库</li>\n</ul>\n<h3 id=\"技术说明\"><a href=\"#技术说明\" class=\"headerlink\" title=\"技术说明\"></a>技术说明</h3><ul>\n<li>domain说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/154423_a15e4a4c_1102706.png\" alt=\"domain\" title=\"图片5.png\"></li>\n<li>添加注释@entity</li>\n<li>主体继承FBSubject,客体继承FBObject</li>\n<li>每个字段属性添加@Description(“角色名称”)注解，方便后期功能扩充</li>\n<li>service说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/160045_4a882daf_1102706.png\" alt=\"service\" title=\"图片6.png\"></li>\n<li>添加@Service注解，加入spring容器管理</li>\n<li>添加@ServiceTrace注解，系统会自动管理service接口日志，记录到logback<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/160703_aa9ffc2f_1102706.png\" alt=\"输入图片说明\" title=\"图片7.png\"></li>\n<li>接口的增删改操作需要捕获reporsitory发生的异常，然后throw出appException异常，这个是自定义异常，统一处理系统异常，记录logback,可自定义入参，第一个是异常码，可自定义，第二个是系统异常，可自定义;</li>\n<li>对于一个服务接口有2个及以上“增”“删”“改”操作的，需要添加事务@Transactional</li>\n<li>controller说明<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/162413_b14e447d_1102706.png\" alt=\"controller\" title=\"图片8.png\"></li>\n<li>添加控制层上添加@RequestMapping ，定位当前接口位置，便于后期权限控制<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/163109_0c571fe1_1102706.png\" alt=\"输入图片说明\" title=\"图片9.png\"></li>\n<li>controller回调GenericResult\\&lt;?>封装回调函数，里面有当前请求是否成功，成功状态，异常状态，异常码，数据集对象等，系统回封装成json返回前端;</li>\n<li>controller中需要记录用户的操作日志，可以只对增删改操作记录，查询根据具体情况记录，addOperateLog第一个为日志信息，自定义，第二个是请求上下文对象，系统需要根据请求上下文获取登录用户信息和IP等;</li>\n<li>操作日志需要在finally中记录，防止系统异常没有记录;</li>\n<li>war 说明<br><img src=\"https://git.oschina.net/uploads/images/2017/0830/163455_5036a5e5_1102706.png\" alt=\"war \" title=\"图片10.png\"></li>\n</ul>\n<ol>\n<li>Activiti.cfg.xml：activiti流程引擎配置</li>\n<li>applicationContext-jpa.xml：配置持久化层springdata配置</li>\n<li>applicationContext.xml：spring相关配置</li>\n<li>Security.cfg.xml：权限框架springsecutity相关配置</li>\n<li>secutityAcl.cfg.xml：数据权限acl相关配置</li>\n<li>Spring-mvc.xml</li>\n<li>Springbatch-content</li>\n<li>Application-evn.properties:数据源配置及其他的一些参数配置</li>\n<li>Logback.xml：配置系统日志，<blockquote>\n<p>注：可根据具体需求进行配置修改</p>\n<h3 id=\"开发注意事项\"><a href=\"#开发注意事项\" class=\"headerlink\" title=\"开发注意事项\"></a>开发注意事项</h3></blockquote>\n</li>\n<li>clean install -Dmaven.test.skip=true 模块编译</li>\n<li>jetty:run 项目执行<h3 id=\"数据库版本切换\"><a href=\"#数据库版本切换\" class=\"headerlink\" title=\"数据库版本切换\"></a>数据库版本切换</h3></li>\n</ol>\n<ul>\n<li>目前系统支持mysql和Oracle数据库，由于制度报文生成接口是由不同数据库语法编写所以在切换数据库的同时要修改对应的数据库方言配置</li>\n<li>修改pom.xml<br>  <img src=\"https://git.oschina.net/uploads/images/2017/0830/164510_7b159611_1102706.png\" alt=\"输入图片说明\" title=\"图片11.png\"><br><strong>目前0.0.1-SNAPSHOT版本对应mysql;0.0.2-SNAPSHOT版本对应oracle</strong></li>\n</ul>\n<ol>\n<li>修改配置文件applicationContext-jpa.xml，改为数据库所对应的接口实现类<br> <img src=\"https://git.oschina.net/uploads/images/2017/0830/164601_eb23eff4_1102706.png\" alt=\"输入图片说明\" title=\"图片12.png\"></li>\n<li>如果需要新加SQL实现函数，则在对应的系统模块中添加，例如<br> <img src=\"https://git.oschina.net/uploads/images/2017/0830/164642_efb5c1a0_1102706.png\" alt=\"输入图片说明\" title=\"图片13.png\"><br> 实现自己的业务逻辑即可，然后在applicationContext-jpa.xml添加相应配置加入spring管理容器</li>\n</ol>\n"},{"title":"手把手搭建Hexo+OSChina博客","date":"2017-11-17T08:03:58.000Z","_content":"\n# 开始之前\n在安装[hexo][1]之前，必须确认你已经安装了[Node.js][2]和[Git][3]。\n## 1.创建GitHub仓库\n注册[OSChina]()账号，创建一个以[https://gitee.com/ding-data/zhengdingblog.git][5]命名的仓库，其中zhengdingblog为仓库名，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。\n## 2.配置Git\n设置Git的用户名和邮件地址（邮箱就是你注册OSChina时候的邮箱），打开Git Bash(MAC打开终端即可)，键入：\n\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email@example.com\"\n```\n\n## 3.本地Git与GitHub建立联系\n这里介绍SSH的配置，先检查电脑是否已经有SSH  \n\n``` bash\n$ ls -al ~/.ssh\n```\n\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。  \n输入以下指令后，一路回车就好：  \n\n``` bash\n$ ssh-keygen -t rsa -C \"emailt@example.com\"\n```\n\n然后键入以下指令：\n\n``` bash\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n\n如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：  \n\n``` bash\n$ ssh-agent bash\n```\n\n再重新输入指令：  \n\n```bash\n$ ssh-add ~/.ssh/id_rsa\n```\n\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：  \n\n```bash\n$ clip < ~/.ssh/id_rsa.pub\n```\n\n在OSChina上点击你的头像–\\>设置–\\> SSH 公钥  \n标题自己随便取，然后这个公钥就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id\\_rsa.pub复制其内容），最后点击确定。\n最后还是测试一下吧，键入以下命令：  \n\n```bash\n$ ssh -T git@github.com\n```\n\n你可能会看到有警告，没事，输入“yes”就好。\n## 4.初始化hexo文件夹\n到OSChina的[https://gitee.com/ding-data/zhengdingblog.git][6]仓库下，点击克隆/下载,复制里面的HTTPS地址。  \n在E盘或是你喜爱的文件夹下，右键Git Bash Here（windows）或者终端 中在目标目录下: 键入git clone -b develop \\<刚复制的地址\\>  \n\n```bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n$ mkdir Hexo-admin\n```\n\n---- \n\n# Hexo安装配置\n## 1.Hexo初始化\n进入Hexo-admin文件夹  \n\n```bash\n$ cd Hexo-admin\n```\n\n接下来只需要使用 npm 即可完成 Hexo 的安装:  \n\n```bash\n$ npm install -g hexo-cli\n```\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:  \n\n```bash\n$ hexo init\n$ npm install\n```\n\n接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。  \n\n```bash\n$ hexo generate\n$ hexo server\n```\n\n输入Ctrl+C停止服务。\n## 2.Hexo配置\n用编辑器打开 Hexo-admin/ 下的配置文件config.yml找到：\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\ntype: \nrepository:\n```\n\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。  \n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n type: git\n repository: https://github.com/chaooo/chaooo.github.io.git\n branch: master\n```\n\n## 3.完成部署\n最后一步，快要成功了，键入指令：  \n\n```bash\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n\n输入弹出框的用户名与密码(首次使用git会弹出)。  \nOK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：[http://ding-data.gitee.io/zhengdingblog/][7]  \n每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：  \n\n```bash\nTo https://github.com/chaooo/chaooo.github.io.git\n7f3b50a..128a10d  HEAD -> master\nINFO  Deploy done: git\n```\n当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。\n\n---- \n\n# 日常操作\n## 1.写文章\n执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。  \n\n```bash\n$ hexo new [layout] \"文章标题\" #新建文章\n```\n\n然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。  \n其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，  \n同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md  \n\n```bash\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：  \n\n```bash\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。  \n请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件\"：\"后面都必须有个空格，不然会报错。\n## 2.提交\n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。  \n\n```bash\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n\n然后才执行hexo generate -d发布网站到master分支上。  \n\n```bash\n$ hexo generate -d\n```\n\n## 3.本地仓库丢失\n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n### 3.1拷贝仓库\n\n```bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n```\n\n### 3.2配置Hexo\n在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:  \n\n```bash\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n---- \n\n# 小Tips:hexo 命令\n\n```bash\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\nhexo deploy -g  #生成加部署\nhexo server -g  #生成加预览\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n\n\n\n[1]:\thttps://hexo.io/zh-cn/\n[2]:\thttps://nodejs.org/en/\n[3]:\thttps://git-scm.com/\n[5]:\thttps://gitee.com/ding-data/zhengdingblog.git\n[6]:\thttps://gitee.com/ding-data/zhengdingblog.git\n[7]:\thttp://ding-data.gitee.io/zhengdingblog/","source":"_posts/手把手搭建Hexo+OSChina博客.md","raw":"---\ntitle: 手把手搭建Hexo+OSChina博客\ndate: 2017-11-17 16:03:58\ntags: \n- Hexo\n- OSChina\n- 博客\ncategories: 前端\n---\n\n# 开始之前\n在安装[hexo][1]之前，必须确认你已经安装了[Node.js][2]和[Git][3]。\n## 1.创建GitHub仓库\n注册[OSChina]()账号，创建一个以[https://gitee.com/ding-data/zhengdingblog.git][5]命名的仓库，其中zhengdingblog为仓库名，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。\n## 2.配置Git\n设置Git的用户名和邮件地址（邮箱就是你注册OSChina时候的邮箱），打开Git Bash(MAC打开终端即可)，键入：\n\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email@example.com\"\n```\n\n## 3.本地Git与GitHub建立联系\n这里介绍SSH的配置，先检查电脑是否已经有SSH  \n\n``` bash\n$ ls -al ~/.ssh\n```\n\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。  \n输入以下指令后，一路回车就好：  \n\n``` bash\n$ ssh-keygen -t rsa -C \"emailt@example.com\"\n```\n\n然后键入以下指令：\n\n``` bash\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n\n如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：  \n\n``` bash\n$ ssh-agent bash\n```\n\n再重新输入指令：  \n\n```bash\n$ ssh-add ~/.ssh/id_rsa\n```\n\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：  \n\n```bash\n$ clip < ~/.ssh/id_rsa.pub\n```\n\n在OSChina上点击你的头像–\\>设置–\\> SSH 公钥  \n标题自己随便取，然后这个公钥就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id\\_rsa.pub复制其内容），最后点击确定。\n最后还是测试一下吧，键入以下命令：  \n\n```bash\n$ ssh -T git@github.com\n```\n\n你可能会看到有警告，没事，输入“yes”就好。\n## 4.初始化hexo文件夹\n到OSChina的[https://gitee.com/ding-data/zhengdingblog.git][6]仓库下，点击克隆/下载,复制里面的HTTPS地址。  \n在E盘或是你喜爱的文件夹下，右键Git Bash Here（windows）或者终端 中在目标目录下: 键入git clone -b develop \\<刚复制的地址\\>  \n\n```bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n$ mkdir Hexo-admin\n```\n\n---- \n\n# Hexo安装配置\n## 1.Hexo初始化\n进入Hexo-admin文件夹  \n\n```bash\n$ cd Hexo-admin\n```\n\n接下来只需要使用 npm 即可完成 Hexo 的安装:  \n\n```bash\n$ npm install -g hexo-cli\n```\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:  \n\n```bash\n$ hexo init\n$ npm install\n```\n\n接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。  \n\n```bash\n$ hexo generate\n$ hexo server\n```\n\n输入Ctrl+C停止服务。\n## 2.Hexo配置\n用编辑器打开 Hexo-admin/ 下的配置文件config.yml找到：\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\ntype: \nrepository:\n```\n\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。  \n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n type: git\n repository: https://github.com/chaooo/chaooo.github.io.git\n branch: master\n```\n\n## 3.完成部署\n最后一步，快要成功了，键入指令：  \n\n```bash\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n\n输入弹出框的用户名与密码(首次使用git会弹出)。  \nOK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：[http://ding-data.gitee.io/zhengdingblog/][7]  \n每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：  \n\n```bash\nTo https://github.com/chaooo/chaooo.github.io.git\n7f3b50a..128a10d  HEAD -> master\nINFO  Deploy done: git\n```\n当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。\n\n---- \n\n# 日常操作\n## 1.写文章\n执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。  \n\n```bash\n$ hexo new [layout] \"文章标题\" #新建文章\n```\n\n然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。  \n其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，  \n同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md  \n\n```bash\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：  \n\n```bash\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。  \n请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件\"：\"后面都必须有个空格，不然会报错。\n## 2.提交\n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。  \n\n```bash\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n\n然后才执行hexo generate -d发布网站到master分支上。  \n\n```bash\n$ hexo generate -d\n```\n\n## 3.本地仓库丢失\n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n### 3.1拷贝仓库\n\n```bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n```\n\n### 3.2配置Hexo\n在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:  \n\n```bash\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n---- \n\n# 小Tips:hexo 命令\n\n```bash\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\nhexo deploy -g  #生成加部署\nhexo server -g  #生成加预览\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n\n\n\n[1]:\thttps://hexo.io/zh-cn/\n[2]:\thttps://nodejs.org/en/\n[3]:\thttps://git-scm.com/\n[5]:\thttps://gitee.com/ding-data/zhengdingblog.git\n[6]:\thttps://gitee.com/ding-data/zhengdingblog.git\n[7]:\thttp://ding-data.gitee.io/zhengdingblog/","slug":"手把手搭建Hexo+OSChina博客","published":1,"updated":"2017-11-20T08:14:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaawjgk3000cils6t1d11jy0","content":"<h1 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h1><p>在安装<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>之前，必须确认你已经安装了<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>和<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>。</p>\n<h2 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1.创建GitHub仓库\"></a>1.创建GitHub仓库</h2><p>注册<a href=\"\">OSChina</a>账号，创建一个以<a href=\"https://gitee.com/ding-data/zhengdingblog.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ding-data/zhengdingblog.git</a>命名的仓库，其中zhengdingblog为仓库名，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p>\n<h2 id=\"2-配置Git\"><a href=\"#2-配置Git\" class=\"headerlink\" title=\"2.配置Git\"></a>2.配置Git</h2><p>设置Git的用户名和邮件地址（邮箱就是你注册OSChina时候的邮箱），打开Git Bash(MAC打开终端即可)，键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-本地Git与GitHub建立联系\"><a href=\"#3-本地Git与GitHub建立联系\" class=\"headerlink\" title=\"3.本地Git与GitHub建立联系\"></a>3.本地Git与GitHub建立联系</h2><p>这里介绍SSH的配置，先检查电脑是否已经有SSH  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"emailt@example.com\"</span></span><br></pre></td></tr></table></figure>\n<p>然后键入以下指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent -s</span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<p>如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent bash</span><br></pre></td></tr></table></figure>\n<p>再重新输入指令：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>在OSChina上点击你的头像–>设置–> SSH 公钥<br>标题自己随便取，然后这个公钥就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后点击确定。<br>最后还是测试一下吧，键入以下命令：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>你可能会看到有警告，没事，输入“yes”就好。</p>\n<h2 id=\"4-初始化hexo文件夹\"><a href=\"#4-初始化hexo文件夹\" class=\"headerlink\" title=\"4.初始化hexo文件夹\"></a>4.初始化hexo文件夹</h2><p>到OSChina的<a href=\"https://gitee.com/ding-data/zhengdingblog.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ding-data/zhengdingblog.git</a>仓库下，点击克隆/下载,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here（windows）或者终端 中在目标目录下: 键入git clone -b develop \\&lt;刚复制的地址>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">$ mkdir Hexo-admin</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Hexo安装配置\"><a href=\"#Hexo安装配置\" class=\"headerlink\" title=\"Hexo安装配置\"></a>Hexo安装配置</h1><h2 id=\"1-Hexo初始化\"><a href=\"#1-Hexo初始化\" class=\"headerlink\" title=\"1.Hexo初始化\"></a>1.Hexo初始化</h2><p>进入Hexo-admin文件夹  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Hexo-admin</span><br></pre></td></tr></table></figure>\n<p>接下来只需要使用 npm 即可完成 Hexo 的安装:  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>输入Ctrl+C停止服务。</p>\n<h2 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2.Hexo配置\"></a>2.Hexo配置</h2><p>用编辑器打开 Hexo-admin/ 下的配置文件config.yml找到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: </span><br><span class=\"line\">repository:</span><br></pre></td></tr></table></figure>\n<p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\"> <span class=\"built_in\">type</span>: git</span><br><span class=\"line\"> repository: https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\"> branch: master</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完成部署\"><a href=\"#3-完成部署\" class=\"headerlink\" title=\"3.完成部署\"></a>3.完成部署</h2><p>最后一步，快要成功了，键入指令：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href=\"http://ding-data.gitee.io/zhengdingblog/\">http://ding-data.gitee.io/zhengdingblog/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">7f3b50a..128a10d  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n<p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p>\n<hr>\n<h1 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h1><h2 id=\"1-写文章\"><a href=\"#1-写文章\" class=\"headerlink\" title=\"1.写文章\"></a>1.写文章</h2><p>执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] <span class=\"string\">\"文章标题\"</span> <span class=\"comment\">#新建文章</span></span><br></pre></td></tr></table></figure>\n<p>然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。<br>其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br>同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">categories:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件”：”后面都必须有个空格，不然会报错。</p>\n<h2 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h2><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"...\"</span></span><br><span class=\"line\">$ git push origin develop</span><br></pre></td></tr></table></figure>\n<p>然后才执行hexo generate -d发布网站到master分支上。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate -d</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-本地仓库丢失\"><a href=\"#3-本地仓库丢失\" class=\"headerlink\" title=\"3.本地仓库丢失\"></a>3.本地仓库丢失</h2><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p>\n<h3 id=\"3-1拷贝仓库\"><a href=\"#3-1拷贝仓库\" class=\"headerlink\" title=\"3.1拷贝仓库\"></a>3.1拷贝仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2配置Hexo\"><a href=\"#3-2配置Hexo\" class=\"headerlink\" title=\"3.2配置Hexo\"></a>3.2配置Hexo</h3><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm install hexo</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"小Tips-hexo-命令\"><a href=\"#小Tips-hexo-命令\" class=\"headerlink\" title=\"小Tips:hexo 命令\"></a>小Tips:hexo 命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span>  <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">hexo version  <span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">hexo deploy -g  <span class=\"comment\">#生成加部署</span></span><br><span class=\"line\">hexo server -g  <span class=\"comment\">#生成加预览</span></span><br><span class=\"line\"><span class=\"comment\">#命令的简写</span></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h1><p>在安装<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>之前，必须确认你已经安装了<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>和<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>。</p>\n<h2 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1.创建GitHub仓库\"></a>1.创建GitHub仓库</h2><p>注册<a href=\"\">OSChina</a>账号，创建一个以<a href=\"https://gitee.com/ding-data/zhengdingblog.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ding-data/zhengdingblog.git</a>命名的仓库，其中zhengdingblog为仓库名，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p>\n<h2 id=\"2-配置Git\"><a href=\"#2-配置Git\" class=\"headerlink\" title=\"2.配置Git\"></a>2.配置Git</h2><p>设置Git的用户名和邮件地址（邮箱就是你注册OSChina时候的邮箱），打开Git Bash(MAC打开终端即可)，键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-本地Git与GitHub建立联系\"><a href=\"#3-本地Git与GitHub建立联系\" class=\"headerlink\" title=\"3.本地Git与GitHub建立联系\"></a>3.本地Git与GitHub建立联系</h2><p>这里介绍SSH的配置，先检查电脑是否已经有SSH  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"emailt@example.com\"</span></span><br></pre></td></tr></table></figure>\n<p>然后键入以下指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent -s</span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<p>如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent bash</span><br></pre></td></tr></table></figure>\n<p>再重新输入指令：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>在OSChina上点击你的头像–>设置–> SSH 公钥<br>标题自己随便取，然后这个公钥就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后点击确定。<br>最后还是测试一下吧，键入以下命令：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>你可能会看到有警告，没事，输入“yes”就好。</p>\n<h2 id=\"4-初始化hexo文件夹\"><a href=\"#4-初始化hexo文件夹\" class=\"headerlink\" title=\"4.初始化hexo文件夹\"></a>4.初始化hexo文件夹</h2><p>到OSChina的<a href=\"https://gitee.com/ding-data/zhengdingblog.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/ding-data/zhengdingblog.git</a>仓库下，点击克隆/下载,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here（windows）或者终端 中在目标目录下: 键入git clone -b develop \\&lt;刚复制的地址>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">$ mkdir Hexo-admin</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Hexo安装配置\"><a href=\"#Hexo安装配置\" class=\"headerlink\" title=\"Hexo安装配置\"></a>Hexo安装配置</h1><h2 id=\"1-Hexo初始化\"><a href=\"#1-Hexo初始化\" class=\"headerlink\" title=\"1.Hexo初始化\"></a>1.Hexo初始化</h2><p>进入Hexo-admin文件夹  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Hexo-admin</span><br></pre></td></tr></table></figure>\n<p>接下来只需要使用 npm 即可完成 Hexo 的安装:  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>输入Ctrl+C停止服务。</p>\n<h2 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2.Hexo配置\"></a>2.Hexo配置</h2><p>用编辑器打开 Hexo-admin/ 下的配置文件config.yml找到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: </span><br><span class=\"line\">repository:</span><br></pre></td></tr></table></figure>\n<p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\"> <span class=\"built_in\">type</span>: git</span><br><span class=\"line\"> repository: https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\"> branch: master</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完成部署\"><a href=\"#3-完成部署\" class=\"headerlink\" title=\"3.完成部署\"></a>3.完成部署</h2><p>最后一步，快要成功了，键入指令：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href=\"http://ding-data.gitee.io/zhengdingblog/\">http://ding-data.gitee.io/zhengdingblog/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">7f3b50a..128a10d  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n<p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p>\n<hr>\n<h1 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h1><h2 id=\"1-写文章\"><a href=\"#1-写文章\" class=\"headerlink\" title=\"1.写文章\"></a>1.写文章</h2><p>执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] <span class=\"string\">\"文章标题\"</span> <span class=\"comment\">#新建文章</span></span><br></pre></td></tr></table></figure>\n<p>然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。<br>其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br>同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">categories:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件”：”后面都必须有个空格，不然会报错。</p>\n<h2 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h2><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"...\"</span></span><br><span class=\"line\">$ git push origin develop</span><br></pre></td></tr></table></figure>\n<p>然后才执行hexo generate -d发布网站到master分支上。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate -d</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-本地仓库丢失\"><a href=\"#3-本地仓库丢失\" class=\"headerlink\" title=\"3.本地仓库丢失\"></a>3.本地仓库丢失</h2><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p>\n<h3 id=\"3-1拷贝仓库\"><a href=\"#3-1拷贝仓库\" class=\"headerlink\" title=\"3.1拷贝仓库\"></a>3.1拷贝仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2配置Hexo\"><a href=\"#3-2配置Hexo\" class=\"headerlink\" title=\"3.2配置Hexo\"></a>3.2配置Hexo</h3><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm install hexo</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"小Tips-hexo-命令\"><a href=\"#小Tips-hexo-命令\" class=\"headerlink\" title=\"小Tips:hexo 命令\"></a>小Tips:hexo 命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span>  <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">hexo version  <span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">hexo deploy -g  <span class=\"comment\">#生成加部署</span></span><br><span class=\"line\">hexo server -g  <span class=\"comment\">#生成加预览</span></span><br><span class=\"line\"><span class=\"comment\">#命令的简写</span></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-11-16T04:45:14.000Z","updated":"2017-11-16T04:45:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaawjgk8000dils6iwdudk7u","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjaawjghx0000ils6p6b4lxvz","category_id":"cjaawjgio0002ils6prxzmlds","_id":"cjaawjgix0006ils6n3v7rwap"},{"post_id":"cjaawjgi90001ils6vh58b93g","category_id":"cjaawjgiv0004ils65n4z3zuq","_id":"cjaawjgiz000ails6x3vldl5p"},{"post_id":"cjaawjgk3000cils6t1d11jy0","category_id":"cjaawjgkc000eils67gtkr6ge","_id":"cjaawjgke000hils6gk1k1a6b"}],"PostTag":[{"post_id":"cjaawjghx0000ils6p6b4lxvz","tag_id":"cjaawjgiu0003ils6zpe0fo97","_id":"cjaawjgiy0008ils6oyffxnrh"},{"post_id":"cjaawjghx0000ils6p6b4lxvz","tag_id":"cjaawjgiw0005ils68ipy2um9","_id":"cjaawjgiz0009ils672wni2nl"},{"post_id":"cjaawjgi90001ils6vh58b93g","tag_id":"cjaawjgix0007ils6xvh5iinl","_id":"cjaawjgj1000bils68veoi2d4"},{"post_id":"cjaawjgk3000cils6t1d11jy0","tag_id":"cjaawjgkd000fils68tckzrqy","_id":"cjaawjgkg000jils64x519yqv"},{"post_id":"cjaawjgk3000cils6t1d11jy0","tag_id":"cjaawjgke000gils62h9y5aat","_id":"cjaawjgki000kils6wzlaw1zi"},{"post_id":"cjaawjgk3000cils6t1d11jy0","tag_id":"cjaawjgke000iils6isx4898q","_id":"cjaawjgkj000lils6daij84x1"}],"Tag":[{"name":"filter","_id":"cjaawjgiu0003ils6zpe0fo97"},{"name":"跨域","_id":"cjaawjgiw0005ils68ipy2um9"},{"name":"git","_id":"cjaawjgix0007ils6xvh5iinl"},{"name":"Hexo","_id":"cjaawjgkd000fils68tckzrqy"},{"name":"OSChina","_id":"cjaawjgke000gils62h9y5aat"},{"name":"博客","_id":"cjaawjgke000iils6isx4898q"}]}}